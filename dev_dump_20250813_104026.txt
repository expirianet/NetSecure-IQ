===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\cmd\api\main.go =====
package main

import (
	"log"
	"net/http"
	"os"
	"time"

	"backend/internal/handlers"
	"backend/internal/repository"
)

func main() {
	// Env
	dsn := getenv("DATABASE_URL", "postgres://postgres:postgres@localhost:5432/netsecure?sslmode=disable")
	secret := []byte(getenv("JWT_SECRET", "devsecret"))
	addr := getenv("ADDR", ":8081")

	// DB
	repo, err := repository.NewPostgres(dsn)
	if err != nil {
		log.Fatal("db connect:", err)
	}
	defer repo.Close()

	// Handlers
	auth := handlers.NewAuthHandler(repo, secret)
	org := handlers.NewOrganizationHandler(secret)

	// Router
	mux := http.NewServeMux()

	// Auth
	mux.HandleFunc("/api/auth/login", withCORS(auth.Login))
	mux.HandleFunc("/api/login",       withCORS(auth.Login)) // alias pour l'ancien front
	mux.HandleFunc("/api/auth/me",     withCORS(auth.Me))

	// Organization (GET/POST)
	mux.HandleFunc("/api/complete-organization", withCORS(org.CompleteOrganization))

	srv := &http.Server{
		Addr:              addr,
		Handler:           logRequests(mux),
		ReadHeaderTimeout: 10 * time.Second,
	}
	log.Println("API listening on", addr)
	log.Fatal(srv.ListenAndServe())
}

func getenv(k, def string) string {
	if v := os.Getenv(k); v != "" {
		return v
	}
	return def
}

// CORS minimal
func withCORS(h http.HandlerFunc) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Headers", "Authorization, Content-Type")
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
		if r.Method == http.MethodOptions {
			w.WriteHeader(http.StatusNoContent)
			return
		}
		h.ServeHTTP(w, r)
	}
}

// Logging minimal
func logRequests(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()
		h.ServeHTTP(w, r)
		log.Printf("%s %s (%s)", r.Method, r.URL.Path, time.Since(start))
	})
}

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\cmd\api\main.go =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\auth\jwt.go =====
package auth

import (
	"errors"
	"time"

	"github.com/golang-jwt/jwt/v5"
)

type Claims struct {
	UserID         string  `json:"uid"`
	RoleID         int     `json:"rid"`
	OrganizationID *string `json:"org,omitempty"`
	jwt.RegisteredClaims
}

func IssueJWT(secret []byte, userID string, roleID int, organizationID *string) (string, error) {
	now := time.Now()
	claims := Claims{
		UserID:         userID,
		RoleID:         roleID,
		OrganizationID: organizationID,
		RegisteredClaims: jwt.RegisteredClaims{
			IssuedAt:  jwt.NewNumericDate(now),
			NotBefore: jwt.NewNumericDate(now),
			ExpiresAt: jwt.NewNumericDate(now.Add(24 * time.Hour)),
		},
	}
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString(secret)
}

func ParseJWT(secret []byte, tokenString string) (*Claims, error) {
	parser := jwt.NewParser(jwt.WithValidMethods([]string{jwt.SigningMethodHS256.Alg()}))
	token, err := parser.ParseWithClaims(tokenString, &Claims{}, func(t *jwt.Token) (interface{}, error) {
		return secret, nil
	})
	if err != nil {
		return nil, err
	}
	claims, ok := token.Claims.(*Claims)
	if !ok || !token.Valid {
		return nil, errors.New("invalid_token")
	}
	return claims, nil
}

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\auth\jwt.go =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\handlers\agent.go =====
package handlers

import (
    "github.com/gofiber/fiber/v2"
    "github.com/yourorg/yourapp/internal/models"
    "github.com/yourorg/yourapp/internal/wireguard"
    "github.com/google/uuid"
    "gorm.io/gorm"
)

func PreRegisterAgent(db *gorm.DB) fiber.Handler {
    return func(c *fiber.Ctx) error {
        var req struct {
            MacAddress string `json:"mac_address"`
        }
        if err := c.BodyParser(&req); err != nil {
            return fiber.ErrBadRequest
        }
        var agent models.Agent
        if err := db.Where("mac_address = ?", req.MacAddress).First(&agent).Error; err == nil {
            return fiber.NewError(fiber.StatusConflict, "Agent already registered")
        }
        peer, script, err := wireguard.CreatePeerAndScript(req.MacAddress)
        if err != nil {
            return fiber.ErrInternalServerError
        }
        agent = models.Agent{
            ID:              uuid.New(),
            MacAddress:      req.MacAddress,
            Status:          "unassociated",
            WireGuardPeerID: peer.ID,
        }
        if err := db.Create(&agent).Error; err != nil {
            return fiber.ErrInternalServerError
        }
        return c.JSON(fiber.Map{
            "script": script,
            "agent":  agent,
        })
    }
}

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\handlers\agent.go =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\handlers\organization.go =====
package handlers

import (
	"encoding/json"
	"net/http"
	"strings"

	"backend/internal/auth"
)

type OrganizationHandler struct {
	secret []byte
}

func NewOrganizationHandler(secret []byte) *OrganizationHandler {
	return &OrganizationHandler{secret: secret}
}

// CompleteOrganization gÃ¨re GET (lecture) et POST (upsert "dummy-safe")
// Objectif: Ã©viter les 500 et fournir un JSON conforme au front.
func (h *OrganizationHandler) CompleteOrganization(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=utf-8")

	// Auth simple par Bearer
	hdr := r.Header.Get("Authorization")
	if hdr == "" || !strings.HasPrefix(strings.ToLower(hdr), "bearer ") {
		http.Error(w, `{"error":"missing or invalid Authorization header"}`, http.StatusUnauthorized)
		return
	}
	token := strings.TrimSpace(hdr[len("Bearer "):])
	if _, err := auth.ParseJWT(h.secret, token); err != nil {
		http.Error(w, `{"error":"invalid token"}`, http.StatusUnauthorized)
		return
	}

	switch r.Method {
	case http.MethodGet:
		// âš ï¸ Minimal: renvoyer un objet "vide" (le front affiche "N/A" sans planter)
		resp := map[string]any{
			"name":           "",
			"vat_number":     "",
			"address":        "",
			"city":           "",
			"state":          "",
			"zip_code":       "",
			"contact_email":  "",
			"contact_phone":  "",
			"sdi_code":       "",
			"pec_email":      "",
			"personnel_info": "",
			"manager":   map[string]string{"name": "", "email": "", "phone": ""},
			"controller": map[string]string{"name": "", "email": "", "phone": ""},
			"processor":  map[string]string{"name": "", "email": "", "phone": ""},
		}
		_ = json.NewEncoder(w).Encode(resp)
		return

	case http.MethodPost:
		// âš ï¸ Minimal: on accepte la charge utile et on confirme.
		var in map[string]any
		_ = json.NewDecoder(r.Body).Decode(&in)

		out := map[string]any{
			"message":       "organization saved",
			"organization":  in, // Ã©cho de ce qui est envoyÃ©
		}
		_ = json.NewEncoder(w).Encode(out)
		return

	case http.MethodOptions:
		w.WriteHeader(http.StatusNoContent)
		return

	default:
		http.Error(w, `{"error":"method not allowed"}`, http.StatusMethodNotAllowed)
		return
	}
}

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\handlers\organization.go =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\models\agent.go =====
package models

import (
    "github.com/google/uuid"
    "time"
)

type Agent struct {
    ID              uuid.UUID `gorm:"type:uuid;primaryKey"`
    MacAddress      string    `gorm:"uniqueIndex"`
    Status          string    // unassociated, associated, deactivated
    WireGuardPeerID uuid.UUID
    CreatedAt       time.Time
    UpdatedAt       time.Time
}

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\models\agent.go =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\models\user.go =====
package models

type User struct {
	ID              string
	Email           string
	PasswordHash    string
	FirstName       *string
	LastName        *string
	RoleID          int
	OrganizationID  *string
	IsActive        bool
}

type MeDTO struct {
	ID             string   `json:"id"`
	Email          string   `json:"email"`
	RoleID         int      `json:"role_id"`
	OrganizationID *string  `json:"organization_id"`
	Permissions    []string `json:"permissions"`
}

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\models\user.go =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\repository\postgres.go =====
package repository

import (
	"context"
	"database/sql"

	_ "github.com/lib/pq"

	"backend/internal/models"
)

type Postgres struct {
	db *sql.DB
}

func NewPostgres(dsn string) (*Postgres, error) {
	db, err := sql.Open("postgres", dsn)
	if err != nil {
		return nil, err
	}
	return &Postgres{db: db}, nil
}
func (p *Postgres) Close() { _ = p.db.Close() }

// SchÃ©ma conforme Ã  ton script SQL
func (p *Postgres) GetUserByEmail(ctx context.Context, email string) (*models.User, error) {
	const q = `
SELECT id::text, email, password_hash, first_name, last_name, role_id, organization_id::text, is_active
FROM users WHERE email = $1 LIMIT 1`
	var u models.User
	var org sql.NullString
	err := p.db.QueryRowContext(ctx, q, email).Scan(
		&u.ID, &u.Email, &u.PasswordHash, &u.FirstName, &u.LastName, &u.RoleID, &org, &u.IsActive,
	)
	if err != nil {
		return nil, err
	}
	if org.Valid {
		tmp := org.String
		u.OrganizationID = &tmp
	}
	return &u, nil
}

func (p *Postgres) GetUserByID(ctx context.Context, id string) (*models.User, error) {
	const q = `
SELECT id::text, email, password_hash, first_name, last_name, role_id, organization_id::text, is_active
FROM users WHERE id = $1 LIMIT 1`
	var u models.User
	var org sql.NullString
	err := p.db.QueryRowContext(ctx, q, id).Scan(
		&u.ID, &u.Email, &u.PasswordHash, &u.FirstName, &u.LastName, &u.RoleID, &org, &u.IsActive,
	)
	if err != nil {
		return nil, err
	}
	if org.Valid {
		tmp := org.String
		u.OrganizationID = &tmp
	}
	return &u, nil
}

// Construit la liste des permissions depuis role_permissions + permissions
// (ton schÃ©ma: permissions(name) comme 'organizations:read', 'monitoring:write', etc.)
func (p *Postgres) BuildPermissions(ctx context.Context, roleID int) ([]string, error) {
	const q = `
SELECT p.name, rp.read_access, rp.write_access
FROM role_permissions rp
JOIN permissions p ON p.id = rp.permission_id
WHERE rp.role_id = $1`
	rows, err := p.db.QueryContext(ctx, q, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	permSet := map[string]struct{}{}
	for rows.Next() {
		var name string
		var read, write bool
		if err := rows.Scan(&name, &read, &write); err != nil {
			return nil, err
		}
		if read || write {
			permSet[name] = struct{}{}
		}
	}
	out := make([]string, 0, len(permSet))
	for k := range permSet {
		out = append(out, k)
	}
	return out, nil
}

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\repository\postgres.go =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\wireguard\wg.go =====
package wireguard

import (
    "crypto/rand"
    "encoding/base64"
    "fmt"
    "github.com/google/uuid"
)

type Peer struct {
    ID         uuid.UUID
    PrivateKey string
    PublicKey  string
    IPAddress  string
    Enabled    bool
}

func GenerateKeyPair() (privateKey, publicKey string, err error) {
    priv := make([]byte, 32)
    _, err = rand.Read(priv)
    if err != nil {
        return "", "", err
    }
    privateKey = base64.StdEncoding.EncodeToString(priv)
    publicKey = base64.StdEncoding.EncodeToString([]byte(reverse(string(priv))))
    return privateKey, publicKey, nil
}

func reverse(s string) string {
    runes := []rune(s)
    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {
        runes[i], runes[j] = runes[j], runes[i]
    }
    return string(runes)
}

func CreatePeerAndScript(mac string) (*Peer, string, error) {
    priv, pub, err := GenerateKeyPair()
    if err != nil {
        return nil, "", err
    }
    peer := &Peer{
        ID:         uuid.New(),
        PrivateKey: priv,
        PublicKey:  pub,
        IPAddress:  fmt.Sprintf("10.10.10.%d/32", randByte()),
        Enabled:    false,
    }
    script := GenerateMikrotikScript(peer, mac)
    return peer, script, nil
}

func randByte() int {
    b := make([]byte, 1)
    rand.Read(b)
    return int(b[0])
}

func GenerateMikrotikScript(peer *Peer, mac string) string {
    return fmt.Sprintf(`
# MikroTik WireGuard onboarding script
/interface wireguard add name=wg0 private-key="%s"
/ip address add address=%s interface=wg0
/interface wireguard peers add public-key="SERVER_PUBLIC_KEY" endpoint-address="vpn.example.com" endpoint-port=51820 allowed-address=0.0.0.0/0
# MAC: %s
`, peer.PrivateKey, peer.IPAddress, mac)
}

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\wireguard\wg.go =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\App.vue =====
<template>
  <div id="app">
    <!-- Barre de navigation (switch auto selon le rÃ´le) -->
    <component :is="navComponent" />

    <!-- Contenu principal -->
    <main class="main-content">
      <router-view />
    </main>

    <!-- Canvas global pour particles.js -->
    <div id="particles-js"></div>
  </div>
</template>

<script setup>
import { ref, watch, onMounted, onUnmounted, computed, nextTick } from 'vue'
import TopNavigation from '@/components/TopNavigation.vue'
import TopNavigationUser from '@/components/TopNavigationUser.vue'
import TopNavigationOperator from '@/components/TopNavigationOperator.vue'

/* ---------- RÃ´le & navigation ---------- */
const role = ref(localStorage.getItem('role') || '')

const navComponent = computed(() => {
  if (role.value === 'user') return TopNavigationUser
  if (role.value === 'operator') return TopNavigationOperator
  return TopNavigation // admin / dÃ©faut
})

function updateRoleFromStorage() {
  role.value = localStorage.getItem('role') || ''
}

/* ---------- ThÃ¨me ---------- */
const theme = ref(localStorage.getItem('theme') || 'dark')

watch(theme, (newTheme) => {
  document.documentElement.setAttribute('data-theme', newTheme)
  localStorage.setItem('theme', newTheme)
})

/* ---------- particles.js ---------- */
function initParticles() {
  const dark = theme.value === 'dark'
  if (!window.particlesJS) return

  // DÃ©truire l'ancien canvas
  const oldCanvas = document.querySelector('#particles-js > canvas')
  if (oldCanvas) oldCanvas.remove()

  window.particlesJS('particles-js', {
    particles: {
      number: { value: 80, density: { enable: true, value_area: 800 } },
      color: { value: dark ? '#ffffff' : '#888888' },
      shape: { type: 'circle' },
      opacity: { value: dark ? 0.5 : 0.3 },
      size: { value: 3, random: true },
      line_linked: {
        enable: true,
        distance: 150,
        color: dark ? '#ffffff' : '#E0E0E0',
        opacity: dark ? 0.4 : 0.3,
        width: 1
      },
      move: { enable: true, speed: 6, direction: 'none', out_mode: 'bounce' }
    },
    interactivity: {
      detect_on: 'canvas',
      events: {
        onhover: { enable: true, mode: 'repulse' },
        onclick: { enable: true, mode: 'push' },
        resize: true
      },
      modes: {
        repulse: { distance: 200 },
        push: { particles_nb: 4 }
      }
    },
    retina_detect: true
  })
}

function attachThemeObserver() {
  const observer = new MutationObserver(() => initParticles())
  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['data-theme']
  })
  return observer
}

/* ---------- Lifecycle ---------- */
let themeObserver

onMounted(async () => {
  // Appliquer le thÃ¨me
  document.documentElement.setAttribute('data-theme', theme.value)

  // Charger particles avec fallback CDN
  if (!window.particlesJS) {
    const script = document.createElement('script')
    script.src = '/particles/particles.min.js'
    script.onload = () => { initParticles(); themeObserver = attachThemeObserver() }
    script.onerror = () => {
      const cdn = document.createElement('script')
      cdn.src = 'https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js'
      cdn.onload = () => { initParticles(); themeObserver = attachThemeObserver() }
      document.body.appendChild(cdn)
    }
    document.body.appendChild(script)
  } else {
    initParticles()
    themeObserver = attachThemeObserver()
  }

  // Ã‰coutes pour mettre Ã  jour la nav quand lâ€™auth change
  window.addEventListener('storage', updateRoleFromStorage)
  window.addEventListener('auth-changed', updateRoleFromStorage)

  await nextTick()
  updateRoleFromStorage()
})

onUnmounted(() => {
  window.removeEventListener('storage', updateRoleFromStorage)
  window.removeEventListener('auth-changed', updateRoleFromStorage)
  if (themeObserver?.disconnect) themeObserver.disconnect()
})
</script>

<style>
/* Variables par dÃ©faut */
:root {
  --bg-dark: #0e111a;
  --panel-grey: #1a1d26;
  --divider-grey: #2a2d36;
  --text-primary: #f5f7fa;
  --text-secondary: #9ca3af;
  --primary-accent: #00c2c2;
  --primary-hover: #00a7a7;
  --danger: #ef4444;
  --success: #22c55e;
}

/* Override pour le mode clair */
[data-theme='light'] {
  --bg-dark: #ffffff;
  --panel-grey: #f5f5f5;
  --divider-grey: #e0e0e0;
  --text-primary: #1f2937;
  --text-secondary: #6b7280;
  --primary-accent: #00a8a8;
  --primary-hover: #008a8a;
  --danger: #dc2626;
  --success: #22c55e;
}

/* Style global */
body {
  margin: 0;
  padding: 0;
  background-color: var(--bg-dark);
  color: var(--text-primary);
  font-family: 'Inter', sans-serif;
  transition: background-color 0.3s ease, color 0.3s ease;
  min-height: 100vh;
}

/* Contenu principal */
.main-content {
  padding-top: 80px; /* Hauteur de la barre de navigation */
  min-height: calc(100vh - 80px);
  box-sizing: border-box;
  position: relative;
  z-index: 1; /* au-dessus du canvas */
}

/* Reset */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

/* Canvas particles global */
#particles-js {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: 0;           /* derriÃ¨re le contenu */
  pointer-events: none; /* laisser cliquer Ã  travers */
  background-color: var(--bg-dark);
  transition: background-color 0.3s ease;
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\App.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\babelconfig.js =====
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\babelconfig.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\AddOperatorForm.vue =====
<template>
  <div class="login-page">
    <div class="login-wrapper">
      <div class="login-container">
        <div class="login-card">
          <h2 class="login-title">NetSecure-IQ</h2>
          <h3 class="login-subtitle">Register Your Organization</h3>

          <form @submit.prevent="submitForm" class="login-form">
            <div class="form-section">
              <h4><i class="fas fa-building"></i> Organization Information</h4>
              <input v-model="form.name" placeholder="Organization Name" required />
              <input v-model="form.vat_number" placeholder="VAT Number or Fiscal Code" required />
              <input v-model="form.address" placeholder="Address" required />
              <div class="form-row">
                <input v-model="form.city" placeholder="City" required />
                <input v-model="form.state" placeholder="State" required />
                <input v-model="form.zip_code" placeholder="ZIP Code" required />
              </div>
              <input v-model="form.email" type="email" placeholder="Email" required />
              <input v-model="form.phone" type="tel" placeholder="Phone Number" required />
              <input v-model="form.pec_email" type="email" placeholder="PEC Email (Optional)" />
              <input v-model="form.sdi" placeholder="SDI Code (Optional)" />
            </div>

            <div class="form-section">
              <h4><i class="fas fa-user-tie"></i> Company Manager</h4>
              <input v-model="form.manager_name" placeholder="Name and Surname" required />
              <input v-model="form.manager_email" type="email" placeholder="Email" required />
              <input v-model="form.manager_phone" placeholder="Phone Number" required />
            </div>

            <div class="form-section">
              <h4><i class="fas fa-user-cog"></i> Technical Manager</h4>
              <input v-model="form.technical_name" placeholder="Name and Surname" required />
              <input v-model="form.technical_email" type="email" placeholder="Email" required />
              <input v-model="form.technical_phone" placeholder="Phone Number" required />
            </div>

            <div class="form-section">
              <h4><i class="fas fa-shield-alt"></i> Data Controller</h4>
              <input v-model="form.controller_name" placeholder="Name and Surname" required />
              <input v-model="form.controller_email" type="email" placeholder="Email" required />
              <input v-model="form.controller_phone" placeholder="Phone Number" required />
            </div>

            <div class="form-section">
              <h4><i class="fas fa-database"></i> Data Processor</h4>
              <input v-model="form.processor_name" placeholder="Name and Surname" required />
              <input v-model="form.processor_email" type="email" placeholder="Email" required />
              <input v-model="form.processor_phone" placeholder="Phone Number" required />
            </div>

            <div class="form-actions">
              <button type="submit" :disabled="loading">
                {{ loading ? 'Submitting...' : 'Submit' }}
              </button>
              <button type="button" class="btn-secondary" @click="goToDashboard">
                Go to Dashboard
              </button>
            </div>

            <p v-if="message" class="login-message" :class="messageType">
              {{ message }}
            </p>
          </form>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import { useRouter } from 'vue-router'
import { reactive } from 'vue'

const router = useRouter()
const message = ref('')
const loading = ref(false)
const successMessage = ref(false)

const messageType = computed(() => (successMessage.value ? 'success' : 'error'))

onMounted(() => { document.title = 'NetSecure-IQ - Organization Form' })

const form = reactive({
  name: '', vat_number: '', address: '', state: '', city: '', zip_code: '',
  email: '', pec_email: '', sdi: '', phone: '',
  manager_name: '', manager_email: '', manager_phone: '',
  technical_name: '', technical_email: '', technical_phone: '',
  controller_name: '', controller_email: '', controller_phone: '',
  processor_name: '', processor_email: '', processor_phone: ''
})

const goToDashboard = () => router.push('/dashboard')

const submitForm = async () => {
  const personnelInfo = `
Company Manager:
  Name: ${form.manager_name}
  Email: ${form.manager_email}
  Phone: ${form.manager_phone}

Technical Manager:
  Name: ${form.technical_name}
  Email: ${form.technical_email}
  Phone: ${form.technical_phone}

Data Controller:
  Name: ${form.controller_name}
  Email: ${form.controller_email}
  Phone: ${form.controller_phone}

Data Processor:
  Name: ${form.processor_name}
  Email: ${form.processor_email}
  Phone: ${form.processor_phone}
`.trim()

  const payload = {
    name: form.name,
    vat_number: form.vat_number,
    address: form.address,
    state: form.state,
    city: form.city,
    zip_code: form.zip_code,
    contact_email: form.email,
    pec_email: form.pec_email,
    sdi_code: form.sdi,
    contact_phone: form.phone,
    personnel_info: personnelInfo,
    user_id: localStorage.getItem('user_id'),
  }

  try {
    const response = await fetch(`${process.env.VUE_APP_BACKEND_URL}/api/complete-organization`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    })

    const text = await response.text()
    let data
    try { data = JSON.parse(text) } catch { throw new Error(text) }

    if (!response.ok) throw new Error(data.error || data.message)

    successMessage.value = true
    message.value = 'Organization info submitted! Redirecting...'
    setTimeout(() => router.push('/dashboard'), 1000)
  } catch (err) {
    successMessage.value = false
    message.value = 'Submission failed: ' + err.message
  }
}
</script>

<style scoped>
@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css');

:root {
  --bg-dark: #0e111a;
  --panel-grey: #1a1d26;
  --divider-grey: #2a2d36;
  --text-primary: #f5f7fa;
  --text-secondary: #9ca3af;
  --primary-accent: #00c2c2;
  --primary-hover: #00a7a7;
  --danger: #ef4444;
  --success: #22c55e;
  --border-radius: 12px;
  --transition: all 0.2s ease;
}

.login-page { position: relative; min-height: 100vh; overflow: hidden; background-color: var(--bg-dark); }

.login-wrapper { position: relative; z-index: 10; display: flex; align-items: center; justify-content: center; padding: 32px; min-height: 100vh; }
.login-container { width: 100%; max-width: 800px; }

.login-card {
  background-color: var(--panel-grey); border-radius: 16px; padding: 32px;
  box-shadow: 0 0 40px rgba(0, 194, 194, 0.05); box-sizing: border-box;
  border: 1px solid rgba(255, 255, 255, 0.05);
}

.login-title { text-align: center; font-size: 24px; font-weight: 600; color: var(--primary-accent); margin-bottom: 8px; }
.login-subtitle { text-align: center; font-size: 18px; color: var(--text-primary); margin-bottom: 32px; font-weight: 500; }

.login-form { display: flex; flex-direction: column; gap: 16px; }

.form-section { background-color: rgba(31, 41, 55, 0.3); border-radius: 8px; padding: 16px; margin-bottom: 16px; transition: background-color 0.3s ease; }
:root:not([data-theme='dark']) .form-section { background-color: rgba(243, 244, 246, 0.5); border: 1px solid rgba(209, 213, 219, 0.5); }
.form-section h4 { color: var(--primary-accent); margin: 0 0 16px; font-size: 16px; font-weight: 500; display: flex; align-items: center; gap: 8px; }
.form-section h4 i { font-size: 14px; }

.login-form input {
  width: 100%; background-color: var(--panel-grey); border: 1px solid var(--divider-grey); border-radius: 6px;
  padding: 12px 14px; font-size: 14px; color: var(--text-primary); transition: var(--transition); margin-bottom: 8px;
}
.login-form input:focus { outline: none; border-color: var(--primary-accent); box-shadow: 0 0 0 2px rgba(0, 194, 194, 0.2); }
.login-form input::placeholder { color: var(--text-secondary); opacity: 0.7; }

.form-row { display: flex; gap: 16px; margin-bottom: 8px; }
.form-row input { margin-bottom: 0; }

.form-actions { display: flex; justify-content: space-between; margin-top: 24px; gap: 16px; }
button { flex: 1; padding: 12px 20px; border: none; border-radius: 6px; font-weight: 600; font-size: 14px; cursor: pointer; transition: var(--transition); display: inline-flex; align-items: center; justify-content: center; gap: 8px; }
button:disabled { opacity: 0.6; cursor: not-allowed; }
button:not(:disabled):hover { transform: translateY(-1px); }
button[type='submit'] { background-color: var(--primary-accent); color: #0e111a; }
button[type='submit']:not(:disabled):hover { background-color: var(--primary-hover); }
.btn-secondary { background-color: transparent; color: var(--primary-accent); border: 1px solid var(--primary-accent) !important; }
.btn-secondary:not(:disabled):hover { background-color: rgba(0, 194, 194, 0.1); }

.login-message { margin-top: 16px; padding: 12px 16px; border-radius: 6px; font-size: 14px; text-align: center; transition: var(--transition); }
.login-message.success { background-color: rgba(34, 197, 94, 0.1); color: var(--success); border: 1px solid rgba(34, 197, 94, 0.2); }
.login-message.error { background-color: rgba(239, 68, 68, 0.1); color: var(--danger); border: 1px solid rgba(239, 68, 68, 0.2); }

@media (max-width: 768px) {
  .login-wrapper { padding: 16px; }
  .login-card { padding: 24px; }
  .form-row { flex-direction: column; gap: 8px; }
  .form-actions { flex-direction: column; }
  button { width: 100%; }
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\AddOperatorForm.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\AddUserForm.vue =====
<template>
  <div class="add-user-page">
    <h2>Add New User</h2>

    <form @submit.prevent="submitForm">
      <div>
        <label>First Name:</label>
        <input v-model="firstName" type="text" required />
      </div>

      <div>
        <label>Last Name:</label>
        <input v-model="lastName" type="text" required />
      </div>

      <div>
        <label>Email:</label>
        <input v-model="email" type="email" required />
      </div>

      <div v-if="isAdmin">
        <label>Select Organization:</label>
        <select v-model="selectedOrg" required>
          <option v-for="org in organizations" :key="org.id" :value="org.id">
            {{ org.name }}
          </option>
        </select>
      </div>

      <button type="submit">Add User</button>
      <p v-if="message">{{ message }}</p>
    </form>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'

const email = ref('')
const firstName = ref('')
const lastName = ref('')
const organizations = ref([])
const selectedOrg = ref(null)
const message = ref('')

const role = localStorage.getItem('role')
const userOrgId = localStorage.getItem('organization_id')
const isAdmin = role === 'administrator'

onMounted(async () => {
  if (isAdmin) {
    const res = await fetch(
      `${process.env.VUE_APP_BACKEND_URL}/api/organizations`,
      {
        headers: {
          Authorization: 'Bearer ' + localStorage.getItem('token'),
        },
      }
    )
    const data = await res.json().catch(() => ({ organizations: [] }))
    organizations.value = data.organizations || []
  }
})

const submitForm = async () => {
  const payload = {
    email: email.value,
    first_name: firstName.value,
    last_name: lastName.value,
    organization_id: isAdmin ? selectedOrg.value : userOrgId,
  }

  const res = await fetch(
    `${process.env.VUE_APP_BACKEND_URL}/api/users`,
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: 'Bearer ' + localStorage.getItem('token'),
      },
      body: JSON.stringify(payload),
    }
  )
  const data = await res.json().catch(() => ({ error: 'Invalid response' }))
  message.value = res.ok
    ? 'âœ… User created and password sent via email!'
    : 'âŒ Failed: ' + (data.error || data.message)
}
</script>

<style scoped>
.add-user-page {
  max-width: 480px;
  margin: 2rem auto;
  padding: 2rem;
  background: var(--panel-grey);
  border-radius: 8px;
}
.add-user-page h2 {
  margin-bottom: 1rem;
  color: var(--primary-accent);
}
.add-user-page form div {
  margin-bottom: 0.75rem;
}
.add-user-page label {
  display: block;
  margin-bottom: 0.25rem;
  color: var(--text-secondary);
}
.add-user-page input,
.add-user-page select {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid var(--divider-grey);
  border-radius: 4px;
  background: var(--bg-dark);
  color: var(--text-primary);
}
.add-user-page button {
  margin-top: 1rem;
  background: var(--primary-accent);
  color: #fff;
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
.add-user-page p {
  margin-top: 0.5rem;
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\AddUserForm.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\BackgroundParticles.vue =====
<template>
  <div id="particles-js"></div>
</template>

<script setup>
import { onMounted, onUnmounted } from 'vue';
import 'particles.js';

let particlesInstance = null;

const initializeParticles = () => {
  if (window.particlesJS) {
    particlesInstance = window.particlesJS('particles-js', {
      particles: {
        number: {
          value: 80,
          density: {
            enable: true,
            value_area: 800
          }
        },
        color: {
          value: '#3B82F6' // blue-500
        },
        shape: {
          type: 'circle'
        },
        opacity: {
          value: 0.5,
          random: true
        },
        size: {
          value: 3,
          random: true
        },
        line_linked: {
          enable: true,
          distance: 150,
          color: '#93C5FD', // blue-300
          opacity: 0.4,
          width: 1
        },
        move: {
          enable: true,
          speed: 2,
          direction: 'none',
          random: true,
          straight: false,
          out_mode: 'out',
          bounce: false
        }
      },
      interactivity: {
        detect_on: 'canvas',
        events: {
          onhover: {
            enable: true,
            mode: 'grab'
          },
          onclick: {
            enable: false
          },
          resize: true
        },
        modes: {
          grab: {
            distance: 140,
            line_linked: {
              opacity: 1
            }
          }
        }
      },
      retina_detect: true
    });
  }
};

const handleResize = () => {
  if (particlesInstance && particlesInstance.pJSDom && particlesInstance.pJSDom.length > 0) {
    particlesInstance.pJSDom[0].pJS.particles.move.speed = window.innerWidth < 768 ? 1 : 2;
    particlesInstance.pJSDom[0].pJS.fn.particlesRefresh();
  }
};

onMounted(() => {
  // Load particles.js dynamically if not already loaded
  if (!window.particlesJS) {
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js';
    script.onload = () => {
      initializeParticles();
      window.addEventListener('resize', handleResize);
    };
    document.head.appendChild(script);
  } else {
    initializeParticles();
    window.addEventListener('resize', handleResize);
  }
});

onUnmounted(() => {
  window.removeEventListener('resize', handleResize);
  if (particlesInstance && particlesInstance.pJSDom && particlesInstance.pJSDom[0]) {
    particlesInstance.pJSDom[0].pJS.fn.vendors.destroypJS();
    particlesInstance = null;
  }
});
</script>

<style scoped>
#particles-js {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
  background-color: var(--bg-page);
  opacity: 0.6;
}

/* Dark mode adjustments */
:root[data-theme="dark"] #particles-js {
  background-color: var(--bg-page);
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\BackgroundParticles.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\charts\LineChart.vue =====
<template>
  <div class="chart-container">
    <canvas ref="chartCanvas"></canvas>
  </div>
</template>

<script>
import { ref, onMounted, watch } from 'vue';
import Chart from 'chart.js/auto';

export default {
  name: 'LineChart',
  props: {
    chartData: {
      type: Object,
      required: true,
      default: () => ({
        labels: [],
        datasets: []
      })
    },
    options: {
      type: Object,
      default: () => ({
        responsive: true,
        maintainAspectRatio: false
      })
    }
  },
  setup(props) {
    const chartCanvas = ref(null);
    let chart = null;

    const initChart = () => {
      if (!chartCanvas.value) return;
      
      if (chart) {
        chart.destroy();
      }
      
      const ctx = chartCanvas.value.getContext('2d');
      if (!ctx) return;
      
      chart = new Chart(ctx, {
        type: 'line',
        data: props.chartData,
        options: {
          ...props.options,
          responsive: true,
          maintainAspectRatio: false,
        },
      });
    };

    onMounted(() => {
      initChart();
    });

    watch(() => props.chartData, () => {
      initChart();
    }, { deep: true });

    return {
      chartCanvas
    };
  }
};
</script>

<style scoped>
.chart-container {
  position: relative;
  height: 100%;
  min-height: 250px;
  width: 100%;
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\charts\LineChart.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\DashboardOperator.vue =====
<!-- src/frontend/src/components/DashboardOperator.vue -->
<template>
    <div class="dashboard-operator">
      <div class="dashboard-wrapper">
        <div class="dashboard-container">
          <div class="dashboard-card">
            <h1 class="dashboard-title">Operator Dashboard</h1>
  
            <div class="dashboard-actions">
              <button class="dashboard-button" @click="go('/routertable')">
                <i class="fas fa-network-wired"></i>
                Router Info
              </button>
  
              <button
                v-if="hasOrganization"
                class="dashboard-button"
                @click="go('/adduser')"
              >
                <i class="fas fa-user-plus"></i>
                Add User
              </button>
  
              <button
                v-if="needsOrganization"
                class="dashboard-button"
                @click="go('/organization/edit')"
              >
                <i class="fas fa-building"></i>
                Complete Organization
              </button>
  
              <button
                v-else
                class="dashboard-button"
                @click="go('/organization')"
              >
                <i class="fas fa-building"></i>
                Organization Profile
              </button>
  
              <button
                v-if="hasOrganization"
                class="dashboard-button"
                @click="go('/agents')"
              >
                <i class="fas fa-robot"></i>
                Agents
              </button>
  
              <button
                v-if="hasOrganization"
                class="dashboard-button"
                @click="go('/agents/register')"
              >
                <i class="fas fa-file-code"></i>
                Pre-register Agent
              </button>
            </div>
  
            <div v-if="!hasOrganization" class="hint">
              Vous devez dâ€™abord complÃ©ter les informations dâ€™organisation pour
              dÃ©bloquer les actions opÃ©rateur.
            </div>
          </div>
        </div>
      </div>
    </div>
  </template>
  
  <script setup>
  import { ref, computed, onMounted, onUnmounted } from 'vue'
  import { useRouter } from 'vue-router'
  
  const router = useRouter()
  
  // organisation depuis localStorage (rendu rÃ©actif via events)
  const organizationId = ref(localStorage.getItem('organization_id') || '')
  const hasOrganization = computed(() => !!organizationId.value && organizationId.value.trim() !== '')
  const needsOrganization = computed(() => !hasOrganization.value)
  
  function syncOrg() {
    organizationId.value = localStorage.getItem('organization_id') || ''
  }
  
  function go(path) {
    router.push(path)
  }
  
  onMounted(() => {
    document.title = 'NetSecure-IQ - Operator Dashboard'
    window.addEventListener('storage', syncOrg)
    window.addEventListener('auth-changed', syncOrg)
  })
  onUnmounted(() => {
    window.removeEventListener('storage', syncOrg)
    window.removeEventListener('auth-changed', syncOrg)
  })
  </script>
  
  <style scoped>
  .dashboard-wrapper {
    min-height: calc(100vh - 80px);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
  }
  .dashboard-container {
    width: 100%;
    max-width: 1100px;
  }
  .dashboard-card {
    background: var(--panel-grey);
    border-radius: 16px;
    padding: 2.5rem;
    border: 1px solid rgba(255,255,255,0.05);
    box-shadow: 0 0 40px rgba(0, 194, 194, 0.05);
  }
  .dashboard-title {
    text-align: center;
    margin-bottom: 2rem;
    font-size: 2rem;
    font-weight: 600;
  }
  .dashboard-actions {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 1rem;
  }
  .dashboard-button {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: .5rem;
    padding: 1.25rem 1rem;
    background: rgba(30,41,59,.7);
    border: 1px solid rgba(255,255,255,.08);
    color: var(--text-primary);
    border-radius: 12px;
    cursor: pointer;
    transition: transform .15s ease, box-shadow .15s ease;
  }
  .dashboard-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(0,0,0,.15);
  }
  .dashboard-button i { font-size: 1.6rem; color: var(--primary-accent); }
  .hint {
    margin-top: 1.25rem;
    color: var(--text-secondary);
    text-align: center;
  }
  @media (max-width: 768px) {
    .dashboard-card { padding: 1.5rem; }
    .dashboard-actions { grid-template-columns: 1fr; }
  }
  </style>
  

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\DashboardOperator.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\DashboardPage.vue =====
<template>
  <div class="dashboard-page">
    <div class="dashboard-wrapper">
      <div class="dashboard-container">
        <div class="dashboard-card">
          <h1 class="dashboard-title">Dashboard</h1>

          <div v-if="isAdminOrOperator" class="dashboard-actions">
            <button class="dashboard-button" @click="goToRouterInfo">
              <i class="fas fa-network-wired"></i> Router Info
            </button>
            <button v-if="!needsOrganization" class="dashboard-button" @click="addUser">
              <i class="fas fa-user-plus"></i> Add User
            </button>
            <button v-if="needsOrganization" class="dashboard-button" @click="goToOrganizationInfo">
              <i class="fas fa-building"></i> Organization Info
            </button>
            <button v-if="canAddOperator" class="dashboard-button" @click="addOperator">
              <i class="fas fa-user-shield"></i> Add Operator
            </button>
          </div>

          <div v-else class="welcome-message">
            <p>Welcome to your dashboard. Select an option to get started.</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { computed, onMounted } from 'vue'
import { useRouter } from 'vue-router'

const router = useRouter()

// Computed properties
const role = computed(() => localStorage.getItem('role'))
const isAdmin = computed(() => role.value === 'administrator')
const isOperator = computed(() => role.value === 'operator')
const isAdminOrOperator = computed(() => isAdmin.value || isOperator.value)
const canAddOperator = computed(() => isAdmin.value || (isOperator.value && hasOrganization.value))
const needsOrganization = computed(() => false)
const hasOrganization = computed(() => true)

// Navigation methods
const goToRouterInfo = () => router.push('/routertable')
const addUser = () => router.push('/adduser')
const goToOrganizationInfo = () => router.push('/organization')
const addOperator = () => router.push('/addoperator')

onMounted(() => {
  document.title = 'NetSecure-IQ - Dashboard'
})
</script>

<style scoped>
.dashboard-page {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  background-color: var(--background-color, #f5f7fa);
  color: var(--text-color, #2c3e50);
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

.dashboard-wrapper {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  position: relative;
  z-index: 1;
}

.dashboard-container { width: 100%; max-width: 1000px; margin: 0 auto; }

.dashboard-card {
  background-color: var(--panel-grey);
  border-radius: 16px;
  padding: 2.5rem;
  box-shadow: 0 0 40px rgba(0, 194, 194, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.dashboard-title {
  text-align: center;
  color: var(--text-color, #2c3e50);
  margin-bottom: 2rem;
  font-size: 2rem;
  font-weight: 600;
}

.dashboard-actions {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1.5rem;
  margin-top: 1.5rem;
}

.dashboard-button {
  display: flex; flex-direction: column; align-items: center; justify-content: center;
  padding: 1.5rem 1rem; min-height: 100px;
  background-color: var(--button-bg, #f0f4f8);
  color: var(--button-text, #2c3e50);
  border: 1px solid var(--border-color, #e0e6ed);
  border-radius: 12px;
  font-size: 1rem; font-weight: 500; cursor: pointer; transition: all .2s ease;
}

.dashboard-button i { font-size: 1.75rem; margin-bottom: .75rem; color: var(--primary-color, #3b82f6); }

.dashboard-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  background-color: var(--button-hover-bg, #e6edf5);
}

.welcome-message { text-align: center; padding: 2rem 0; color: var(--text-secondary, #64748b); }

:global(.dark) .dashboard-card { background-color: rgba(30, 41, 59, 0.7); border-color: rgba(255, 255, 255, 0.1); }
:global(.dark) .dashboard-button { background-color: rgba(30, 41, 59, 0.7); border-color: rgba(255, 255, 255, 0.1); color: #e2e8f0; }
:global(.dark) .dashboard-button:hover { background-color: rgba(41, 55, 78, 0.7); }

@media (max-width: 768px) {
  .dashboard-actions { grid-template-columns: 1fr; }
  .dashboard-card { padding: 1.5rem; }
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\DashboardPage.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\HelloWorld.vue =====
<template>
  <div class="hello">
    <h1>{{ msg }}</h1>
    <p>
      For a guide and recipes on how to configure / customize this project,<br>
      check out the
      <a href="https://cli.vuejs.org" target="_blank" rel="noopener">vue-cli documentation</a>.
    </p>
    <h3>Installed CLI Plugins</h3>
    <ul>
      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel" target="_blank" rel="noopener">babel</a></li>
      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint" target="_blank" rel="noopener">eslint</a></li>
    </ul>
    <h3>Essential Links</h3>
    <ul>
      <li><a href="https://vuejs.org" target="_blank" rel="noopener">Core Docs</a></li>
      <li><a href="https://forum.vuejs.org" target="_blank" rel="noopener">Forum</a></li>
      <li><a href="https://chat.vuejs.org" target="_blank" rel="noopener">Community Chat</a></li>
      <li><a href="https://twitter.com/vuejs" target="_blank" rel="noopener">Twitter</a></li>
      <li><a href="https://news.vuejs.org" target="_blank" rel="noopener">News</a></li>
    </ul>
    <h3>Ecosystem</h3>
    <ul>
      <li><a href="https://router.vuejs.org" target="_blank" rel="noopener">vue-router</a></li>
      <li><a href="https://vuex.vuejs.org" target="_blank" rel="noopener">vuex</a></li>
      <li><a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener">vue-devtools</a></li>
      <li><a href="https://vue-loader.vuejs.org" target="_blank" rel="noopener">vue-loader</a></li>
      <li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">awesome-vue</a></li>
    </ul>
  </div>
</template>

<script>
export default {
  name: 'HelloWorld',
  props: {
    msg: String
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
h3 {
  margin: 40px 0 0;
}
ul {
  list-style-type: none;
  padding: 0;
}
li {
  display: inline-block;
  margin: 0 10px;
}
a {
  color: #42b983;
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\HelloWorld.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\HomePage.vue =====
<template>
  <div class="home-page">
    <!-- Contenu principal -->
    <div class="home-wrapper">
      <div class="home-container">
        <div class="home-card">
          <h1 class="welcome-title">Welcome to NetSecure-IQ</h1>
          <p class="welcome-subtitle">Your network security management solution</p>
          <router-link to="/login" class="login-button">Get Started</router-link>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { onMounted } from 'vue'
onMounted(() => { document.title = 'NetSecure-IQ - Home' })
</script>

<style scoped>
:root {
  --bg-dark: #0e111a;
  --panel-grey: #1a1d26;
  --divider-grey: #2a2d36;
  --text-primary: #f5f7fa;
  --text-secondary: #9ca3af;
  --primary-accent: #00c2c2;
  --primary-hover: #00a7a7;
}

.home-page { position: relative; min-height: 100vh; overflow: hidden; }
.home-wrapper {
  position: relative; z-index: 10;
  display: flex; align-items: center; justify-content: center;
  min-height: 100vh; padding: 32px; text-align: center;
}
.home-container { width: 100%; max-width: 800px; }
.home-card {
  background-color: var(--panel-grey);
  border-radius: 12px; padding: 48px 32px;
  box-shadow: 0 0 40px rgba(0, 194, 194, 0.05); box-sizing: border-box;
}
.welcome-title { font-size: 2.5rem; font-weight: 700; color: var(--primary-accent); margin-bottom: 16px; }
.welcome-subtitle { font-size: 1.25rem; color: var(--text-secondary); margin-bottom: 32px; }
.login-button {
  display: inline-block; background-color: var(--primary-accent); color: var(--bg-dark);
  text-decoration: none; font-weight: 600; font-size: 1rem; padding: 12px 32px; border-radius: 6px;
  transition: background-color 0.2s, color 0.2s;
}
.login-button:hover { background-color: var(--primary-hover); color: var(--text-primary); }

@media (max-width: 768px) {
  .welcome-title { font-size: 2rem; }
  .welcome-subtitle { font-size: 1.1rem; }
  .home-card { padding: 32px 24px; }
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\HomePage.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\LoginForm.vue =====
<template>
  <div class="login-page">
    <div class="login-wrapper">
      <div class="login-container">
        <div class="login-card">
          <h2 class="login-title">NetSecure-IQ</h2>
          <h3 class="login-subtitle">Login to your account</h3>

          <form @submit.prevent="login" class="login-form">
            <input v-model="email" type="email" placeholder="Email address" required />
            <input v-model="password" type="password" placeholder="Password" required />
            <button :disabled="loading" type="submit">
              {{ loading ? "Loading..." : "Login" }}
            </button>
          </form>

          <p class="login-footer">
            Don't have an account?
            <router-link to="/register">Register</router-link>
          </p>

          <p v-if="message" :class="['login-message', successMessage ? 'success' : 'error']">
            {{ message }}
          </p>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import { useRouter } from 'vue-router'
import { useAuth } from '../composables/useAuth'

const email = ref('')
const password = ref('')
const message = ref('')
const successMessage = ref(false)
const loading = ref(false)
const router = useRouter()
const { login: setAuthLogin } = useAuth()

const login = async () => {
  loading.value = true
  try {
    const res = await fetch(`${process.env.VUE_APP_BACKEND_URL}/api/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: email.value, password: password.value })
    })
    const data = await res.json()
    if (!res.ok) throw new Error(data.error || data.message || 'Login failed')

    message.value = 'Login successful! Redirecting...'
    successMessage.value = true

    localStorage.setItem('token', data.token)
    localStorage.setItem('user_id', data.user_id)
    localStorage.setItem('role', data.role?.toLowerCase() || '')
    localStorage.setItem('organization_id', data.organization_id || '')

    window.dispatchEvent(new Event('auth-changed'))

    let redirectTo = '/dashboard'
    const role = data.role?.toLowerCase()
    if (role === 'user') redirectTo = '/routertable'
    else if (role === 'operator' && !data.organization_id) redirectTo = '/organization/edit'

    if (typeof setAuthLogin === 'function') setAuthLogin()
    setTimeout(() => router.push(redirectTo), 200)
  } catch (err) {
    message.value = 'Error: ' + err.message
    successMessage.value = false
  } finally {
    loading.value = false
  }
}
</script>

<style scoped>
:root {
  --bg-dark: #0e111a;
  --panel-grey: #1a1d26;
  --divider-grey: #2a2d36;
  --text-primary: #f5f7fa;
  --text-secondary: #9ca3af;
  --primary-accent: #00c2c2;
  --primary-hover: #00a7a7;
  --danger: #ef4444;
  --success: #22c55e;
}

.login-page { position: relative; min-height: 100vh; overflow: hidden; }
.login-wrapper {
  position: relative; z-index: 10; display: flex; align-items: center; justify-content: center;
  padding: 32px; min-height: 100vh;
}
.login-container { width: 100%; max-width: 420px; }
.login-card {
  background-color: var(--panel-grey);
  border-radius: 12px; padding: 32px;
  box-shadow: 0 0 40px rgba(0, 194, 194, 0.05); box-sizing: border-box;
}
.login-title { text-align: center; font-size: 20px; font-weight: 600; color: var(--primary-accent); margin-bottom: 8px; }
.login-subtitle { text-align: center; font-size: 16px; margin-bottom: 24px; }
.login-form { display: flex; flex-direction: column; gap: 16px; }
.login-form input, .login-form button { width: 100%; box-sizing: border-box; }
.login-form input {
  background-color: var(--panel-grey); border: 1px solid var(--divider-grey); border-radius: 6px;
  padding: 12px 14px; font-size: 14px; color: var(--text-primary); transition: border-color 0.2s;
}
.login-form input::placeholder { color: var(--text-secondary); }
.login-form input:focus { outline: none; border-color: var(--primary-accent); background-color: var(--bg-dark); }
.login-form button {
  background-color: var(--primary-accent); color: var(--bg-dark); border: none; border-radius: 6px;
  font-weight: 600; font-size: 14px; padding: 12px 20px; cursor: pointer; transition: background-color 0.2s;
}
.login-form button:hover { background-color: var(--primary-hover); color: var(--text-primary); }
.login-form button:disabled { background-color: #2f333d; color: #666; cursor: not-allowed; }
.login-footer { text-align: center; font-size: 13px; margin-top: 16px; color: var(--text-secondary); }
.login-footer a { color: var(--primary-accent); margin-left: 4px; text-decoration: none; }
.login-footer a:hover { color: var(--primary-hover); }
.login-message { margin-top: 16px; font-size: 14px; padding: 10px 12px; border-radius: 6px; text-align: center; }
.login-message.success { background-color: rgba(34, 197, 94, 0.1); color: var(--success); }
.login-message.error { background-color: rgba(239, 68, 68, 0.1); color: var(--danger); }
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\LoginForm.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\organization\OrganizationProfile.vue =====
<template>
  <div class="login-page">
    <!-- Indicateur de chargement -->
    <div v-if="isLoading" class="loading-overlay">
      <div class="loading-spinner"></div>
    </div>

    <!-- Messages -->
    <div v-if="showError" class="notification error">
      {{ errorMessage }}
      <button @click="showError = false" class="close-btn">&times;</button>
    </div>
    <div v-if="showSuccess" class="notification success">
      DonnÃ©es chargÃ©es avec succÃ¨s !
      <button @click="showSuccess = false" class="close-btn">&times;</button>
    </div>

    <div class="login-wrapper">
      <div class="login-container">
        <div class="login-card">
          <h2 class="login-title">Organization Profile</h2>
          <h3 class="login-subtitle">View and manage your organization's information</h3>

          <div class="login-form">
            <div class="form-section">
              <h4><i class="fas fa-building"></i> Organization Information</h4>
              <input readonly :value="org.name" />
              <input readonly :value="org.vatNumber" />
              <input readonly :value="org.address" />
              <div class="form-row">
                <input readonly :value="org.city" />
                <input readonly :value="org.state" />
                <input readonly :value="org.zipCode" />
              </div>
              <input readonly :value="org.email" />
              <input readonly :value="org.phone" />
              <input readonly :value="org.pecEmail || 'â€”'" />
              <input readonly :value="org.sdiCode || 'â€”'" />
            </div>

            <div class="form-section">
              <h4><i class="fas fa-user-tie"></i> Company Manager</h4>
              <input readonly :value="org.manager.name" />
              <input readonly :value="org.manager.email" />
              <input readonly :value="org.manager.phone" />
            </div>

            <div class="form-section">
              <h4><i class="fas fa-shield-alt"></i> Data Controller</h4>
              <input readonly :value="org.controller.name" />
              <input readonly :value="org.controller.email" />
              <input readonly :value="org.controller.phone" />
            </div>

            <div class="form-section">
              <h4><i class="fas fa-database"></i> Data Processor</h4>
              <input readonly :value="org.processor.name" />
              <input readonly :value="org.processor.email" />
              <input readonly :value="org.processor.phone" />
            </div>

            <div class="form-actions">
              <router-link to="/organization/edit" class="btn btn-primary">
                <i class="fas fa-edit"></i> Edit Profile
              </router-link>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { useRouter } from 'vue-router'

const router = useRouter()
const isLoading = ref(true)
const error = ref(null)
const showSuccess = ref(false)
const showError = ref(false)
const errorMessage = ref('')

const org = ref({
  name: '', vatNumber: '', address: '', city: '', zipCode: '', state: '',
  email: '', phone: '', sdiCode: '', pecEmail: '', personnelInfo: '',
  manager: { name: '', email: '', phone: '' },
  controller: { name: '', email: '', phone: '' },
  processor: { name: '', email: '', phone: '' }
})

const fetchOrganization = async () => {
  try {
    isLoading.value = true
    error.value = null

    const token = localStorage.getItem('token')
    if (!token) throw new Error('No authentication token found')

    const response = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:8080'}/api/complete-organization`, {
      method: 'GET',
      headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }
    })

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}))
      throw new Error(errorData.message || 'Failed to fetch organization data')
    }

    const data = await response.json()
    org.value = {
      name: data.name || '',
      vatNumber: data.vat_number || '',
      address: data.address || '',
      city: data.city || '',
      zipCode: data.zip_code || '',
      state: data.state || '',
      email: data.contact_email || '',
      phone: data.contact_phone || '',
      sdiCode: data.sdi_code || '',
      pecEmail: data.pec_email || '',
      personnelInfo: data.personnel_info || '',
      manager: { name: data.manager?.name || 'N/A', email: data.manager?.email || 'N/A', phone: data.manager?.phone || 'N/A' },
      controller: { name: data.controller?.name || 'N/A', email: data.controller?.email || 'N/A', phone: data.controller?.phone || 'N/A' },
      processor: { name: data.processor?.name || 'N/A', email: data.processor?.email || 'N/A', phone: data.processor?.phone || 'N/A' }
    }
  } catch (err) {
    const message = err.message || 'An error occurred while loading organization data'
    error.value = message
    errorMessage.value = message
    showError.value = true
    if (err.message.includes('token') || err.message.includes('authenticate')) router.push('/login')
  } finally {
    isLoading.value = false
  }
}

onMounted(async () => {
  document.title = 'NetSecure-IQ - Organization Profile'
  await fetchOrganization()
  showSuccess.value = true
  setTimeout(() => (showSuccess.value = false), 3000)
})
</script>

<style scoped>
@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css');

/* Notifications */
.notification {
  position: fixed; top: 20px; right: 20px; padding: 15px 20px; border-radius: 8px; color: white;
  display: flex; align-items: center; justify-content: space-between; max-width: 400px; z-index: 1000;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); animation: slideIn 0.3s ease-out;
}
.notification.error { background-color: #ff4d4f; }
.notification.success { background-color: #52c41a; }
.notification .close-btn { background: none; border: none; color: white; font-size: 20px; cursor: pointer; margin-left: 15px; padding: 0 5px; line-height: 1; }
@keyframes slideIn { from { transform: translateX(100%); opacity: 0; } to { transform: translateX(0); opacity: 1; } }

/* Loading indicator */
.loading-overlay {
  position: fixed; top: 0; left: 0; right: 0; bottom: 0;
  background: rgba(255, 255, 255, 0.8); display: flex; justify-content: center; align-items: center; z-index: 1000;
}
.loading-spinner { border: 4px solid #f3f3f3; border-top: 4px solid #3498db; border-radius: 50%; width: 40px; height: 40px; animation: spin 1s linear infinite; }
@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }

:root { --bg-dark: #0e111a; --panel-grey: #1a1d26; --divider-grey: #2a2d36; --text-primary: #f5f7fa; --text-secondary: #9ca3af; --primary-accent: #00c2c2; --primary-hover: #00a7a7; --border-radius: 12px; --transition: all 0.2s ease; }
.theme-switcher { display: none!important; }

.login-page { position: relative; min-height: 100vh; background-color: var(--bg-dark); overflow: hidden; }
.login-wrapper { position: relative; z-index: 10; display: flex; align-items: center; justify-content: center; padding: 32px; min-height: 100vh; }
.login-container { width: 100%; max-width: 800px; }
.login-card { background-color: var(--panel-grey); border-radius: 16px; padding: 32px; border: 1px solid rgba(255,255,255,0.05); box-shadow: 0 0 40px rgba(0,194,194,0.05); box-sizing: border-box; }

.login-title { text-align: center; font-size: 24px; font-weight: 600; color: var(--primary-accent); margin-bottom: 8px; }
.login-subtitle { text-align: center; font-size: 18px; color: var(--text-primary); margin-bottom: 32px; font-weight: 500; }

.login-form { display: flex; flex-direction: column; gap: 16px; }

.form-section { background-color: rgba(31,41,55,0.3); border-radius: 8px; padding: 16px; transition: background-color 0.3s ease; }
:root:not([data-theme='dark']) .form-section { background-color: rgba(243,244,246,0.5); border: 1px solid rgba(209,213,219,0.5); }
.form-section h4 { color: var(--primary-accent); margin: 0 0 16px; font-size: 16px; font-weight: 500; display: flex; align-items: center; gap: 8px; }

.login-form input { width: 100%; background-color: var(--panel-grey); border: 1px solid var(--divider-grey); border-radius: 6px; padding: 12px 14px; font-size: 14px; color: var(--text-primary); transition: var(--transition); margin-bottom: 8px; }
.form-row { display: flex; gap: 16px; margin-bottom: 8px; }
.form-row input { margin-bottom: 0; }
.form-actions { display: flex; justify-content: center; margin-top: 24px; gap: 16px; }

.btn { padding: 12px 20px; border: none; border-radius: 6px; font-weight: 600; font-size: 14px; cursor: pointer; transition: var(--transition); display: inline-flex; align-items: center; gap: 8px; }
.btn-primary { background-color: var(--primary-accent); color: #0e111a; }
.btn-primary:hover { background-color: var(--primary-hover); }

@media (max-width: 768px) {
  .login-wrapper { padding: 16px; }
  .login-card { padding: 24px; }
  .form-row { flex-direction: column; gap: 8px; }
  .form-actions { flex-direction: column; }
  .btn { width: 100%; }
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\organization\OrganizationProfile.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\OrganizationForm.vue =====
<template>
  <div class="login-page">
    <!-- Canvas animÃ© -->
    <div id="particles-js"></div>

    <!-- Formulaire d'organisation -->
    <div class="login-wrapper">
      <div class="login-container">
        <div class="login-card">
          <h2 class="login-title">NetSecure-IQ</h2>
          <h3 class="login-subtitle">Register Your Organization</h3>

          <form @submit.prevent="submitForm" class="login-form">
            <!-- Organization Info -->
            <div class="form-section">
              <h4><i class="fas fa-building"></i> Organization Information</h4>
              <input v-model="form.name" placeholder="Organization Name" required />
              <input v-model="form.vat_number" placeholder="VAT Number or Fiscal Code" required />
              <input v-model="form.address" placeholder="Address" required />
              <div class="form-row">
                <input v-model="form.city" placeholder="City" required />
                <input v-model="form.state" placeholder="State" required />
                <input v-model="form.zip_code" placeholder="ZIP Code" required />
              </div>
              <input v-model="form.email" type="email" placeholder="Email" required />
              <input v-model="form.phone" type="tel" placeholder="Phone Number" required />
              <input v-model="form.pec_email" type="email" placeholder="PEC Email (Optional)" />
              <input v-model="form.sdi" placeholder="SDI Code (Optional)" />
            </div>

            <!-- Company Manager -->
            <div class="form-section">
              <h4><i class="fas fa-user-tie"></i> Company Manager</h4>
              <input v-model="form.manager_name" placeholder="Name and Surname" required />
              <input v-model="form.manager_email" type="email" placeholder="Email" required />
              <input v-model="form.manager_phone" placeholder="Phone Number" required />
            </div>

            <!-- Technical Manager -->
            <div class="form-section">
              <h4><i class="fas fa-user-cog"></i> Technical Manager</h4>
              <input v-model="form.technical_name" placeholder="Name and Surname" required />
              <input v-model="form.technical_email" type="email" placeholder="Email" required />
              <input v-model="form.technical_phone" placeholder="Phone Number" required />
            </div>

            <!-- Data Controller -->
            <div class="form-section">
              <h4><i class="fas fa-shield-alt"></i> Data Controller</h4>
              <input v-model="form.controller_name" placeholder="Name and Surname" required />
              <input v-model="form.controller_email" type="email" placeholder="Email" required />
              <input v-model="form.controller_phone" placeholder="Phone Number" required />
            </div>

            <!-- Data Processor -->
            <div class="form-section">
              <h4><i class="fas fa-database"></i> Data Processor</h4>
              <input v-model="form.processor_name" placeholder="Name and Surname" required />
              <input v-model="form.processor_email" type="email" placeholder="Email" required />
              <input v-model="form.processor_phone" placeholder="Phone Number" required />
            </div>

            <div class="form-actions">
              <button type="submit" :disabled="loading">
                {{ loading ? 'Submitting...' : 'Submit' }}
              </button>
              <button type="button" class="btn-secondary" @click="goToDashboard">
                Go to Dashboard
              </button>
            </div>

            <p v-if="message" class="login-message" :class="messageType">
              {{ message }}
            </p>
          </form>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted, nextTick } from 'vue'
import { useRouter } from 'vue-router'
import { reactive } from 'vue'

const router = useRouter()
const message = ref('')
const loading = ref(false)
const successMessage = ref(false)

const messageType = computed(() => {
  return successMessage.value ? 'success' : 'error'
})

/**
 * Initialise ou recharge particles.js en fonction du thÃ¨me actuel.
 */
function renderParticles() {
  const dark = document.documentElement.getAttribute('data-theme') === 'dark' || 
              document.documentElement.classList.contains('dark')
  
  // supprime ancien canvas
  const old = document.querySelector('#particles-js > canvas')
  if (old) old.remove()

  // VÃ©rifie si le thÃ¨me est dÃ©fini dans localStorage
  const savedTheme = localStorage.getItem('theme')
  const isDark = savedTheme ? savedTheme === 'dark' : dark

  // (re)lance particlesJS
  window.particlesJS('particles-js', {
    particles: {
      number: { value: 80, density: { enable: true, value_area: 800 } },
      color: { value: isDark ? '#ffffff' : '#555555' },
      shape: { type: 'circle' },
      opacity: { value: isDark ? 0.5 : 0.5 },
      size: { value: 3, random: true },
      line_linked: {
        enable: true,
        distance: 150,
        color: isDark ? '#ffffff' : '#888888',
        opacity: isDark ? 0.4 : 0.4,
        width: 1
      },
      move: { enable: true, speed: 6, direction: 'none', out_mode: 'bounce' }
    },
    interactivity: {
      detect_on: 'canvas',
      events: {
        onhover: { enable: true, mode: 'repulse' },
        onclick: { enable: true, mode: 'push' },
        resize: true
      },
      modes: {
        repulse: { distance: 200 },
        push: { particles_nb: 4 }
      }
    },
    retina_detect: true
  })
}

// Function to ensure particles are loaded after DOM and theme are ready
async function initializeParticles() {
  // Ensure the particles container exists
  if (!document.getElementById('particles-js')) {
    await new Promise(resolve => setTimeout(resolve, 50));
    return initializeParticles();
  }
  
  // Check for saved theme preference
  const savedTheme = localStorage.getItem('theme')
  if (savedTheme) {
    document.documentElement.setAttribute('data-theme', savedTheme)
    if (savedTheme === 'dark') {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }
  }
  
  // Load particles script if not already loaded
  if (!window.particlesJS) {
    await new Promise((resolve) => {
      const script = document.createElement('script');
      script.src = '/particles/particles.min.js';
      script.onload = resolve;
      document.body.appendChild(script);
    });
  }
  
  // Ensure theme is applied
  await nextTick();
  
  renderParticles();
  
  // Set up theme change observer
  const obs = new MutationObserver((mutations) => {
    for (const m of mutations) {
      if (m.attributeName === 'data-theme' || m.attributeName === 'class') {
        // Update localStorage when theme changes
        const theme = document.documentElement.getAttribute('data-theme') || 
                     (document.documentElement.classList.contains('dark') ? 'dark' : 'light')
        localStorage.setItem('theme', theme)
        
        // Re-render particles with new theme
        const old = document.querySelector('#particles-js > canvas')
        if (old) old.remove()
        renderParticles()
      }
    }
  });

  // Observe theme changes on document.documentElement
  obs.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['data-theme', 'class']
  });
  
  // Initial render with current theme
  renderParticles()
}

// Initialize particles when component is mounted
onMounted(() => {
  // Set initial theme from localStorage if available
  const savedTheme = localStorage.getItem('theme')
  if (savedTheme) {
    document.documentElement.setAttribute('data-theme', savedTheme)
    if (savedTheme === 'dark') {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }
  }
  
  initializeParticles()
})

const form = reactive({
  name: '', vat_number: '', address: '', state: '', city: '', zip_code: '',
  email: '', pec_email: '', sdi: '', phone: '',
  manager_name: '', manager_email: '', manager_phone: '',
  technical_name: '', technical_email: '', technical_phone: '',
  controller_name: '', controller_email: '', controller_phone: '',
  processor_name: '', processor_email: '', processor_phone: ''
})

const goToDashboard = () => {
  router.push('/dashboard')
}

const submitForm = async () => {
  console.log("ðŸ“¤ submitForm() triggered")

  const personnelInfo = `
Company Manager:
  Name: ${form.manager_name}
  Email: ${form.manager_email}
  Phone: ${form.manager_phone}

Technical Manager:
  Name: ${form.technical_name}
  Email: ${form.technical_email}
  Phone: ${form.technical_phone}

Data Controller:
  Name: ${form.controller_name}
  Email: ${form.controller_email}
  Phone: ${form.controller_phone}

Data Processor:
  Name: ${form.processor_name}
  Email: ${form.processor_email}
  Phone: ${form.processor_phone}
`.trim()

  const payload = {
    name: form.name,
    vat_number: form.vat_number,
    address: form.address,
    state: form.state,
    city: form.city,
    zip_code: form.zip_code,
    contact_email: form.email,
    pec_email: form.pec_email,
    sdi_code: form.sdi,
    contact_phone: form.phone,
    personnel_info: personnelInfo,
    user_id: localStorage.getItem("user_id"),
  }

  console.log("ðŸ“¤ Sending payload:", JSON.stringify(payload, null, 2))

  try {
    const response = await fetch(`${process.env.VUE_APP_BACKEND_URL}/api/complete-organization`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    })

    const text = await response.text()
    let data
    try {
      data = JSON.parse(text)
    } catch {
      throw new Error(text)
    }

    if (!response.ok) throw new Error(data.error || data.message)

    message.value = "Organization info submitted! Redirecting..."
    setTimeout(() => router.push('/dashboard'), 1000)

  } catch (err) {
    message.value = "Submission failed: " + err.message
  }
}
</script>

<style scoped>
@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css');

:root {
  --bg-dark: #0e111a;
  --panel-grey: #1a1d26;
  --divider-grey: #2a2d36;
  --text-primary: #f5f7fa;
  --text-secondary: #9ca3af;
  --primary-accent: #00c2c2;
  --primary-hover: #00a7a7;
  --danger: #ef4444;
  --success: #22c55e;
  --border-radius: 12px;
  --transition: all 0.2s ease;
}

/* Page entiÃ¨re */
.login-page {
  position: relative;
  min-height: 100vh;
  overflow: hidden;
  background-color: var(--bg-dark);
}

/* ===== Particles ===== */
#particles-js {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: 0;
  background-color: var(--bg-dark);
  transition: background-color 0.3s ease;
  pointer-events: none;
}

[data-theme='light'] #particles-js {
  background-color: #E0E0E0;
}

/* ===== Login Wrapper ===== */
.login-wrapper {
  position: relative;
  z-index: 10;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 32px;
  min-height: 100vh;
}

/* ===== Container ===== */
.login-container {
  width: 100%;
  max-width: 800px;
}

/* ===== Login Card ===== */
.login-card {
  background-color: var(--panel-grey);
  border-radius: 16px;
  padding: 32px;
  box-shadow: 0 0 40px rgba(0, 194, 194, 0.05);
  box-sizing: border-box;
  border: 1px solid rgba(255, 255, 255, 0.05);
}

/* ===== Headers ===== */
.login-title {
  text-align: center;
  font-size: 24px;
  font-weight: 600;
  color: var(--primary-accent);
  margin-bottom: 8px;
}

.login-subtitle {
  text-align: center;
  font-size: 18px;
  color: var(--text-primary);
  margin-bottom: 32px;
  font-weight: 500;
}

/* ===== Form ===== */
.login-form {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

/* ===== Form Sections ===== */
.form-section {
  background-color: rgba(31, 41, 55, 0.3);
  border-radius: 8px;
  padding: 16px;
  margin-bottom: 16px;
  transition: background-color 0.3s ease;
}

:root:not([data-theme='dark']) .form-section {
  background-color: rgba(243, 244, 246, 0.5);
  border: 1px solid rgba(209, 213, 219, 0.5);
}

.form-section h4 {
  color: var(--primary-accent);
  margin: 0 0 16px;
  font-size: 16px;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 8px;
}

.form-section h4 i {
  font-size: 14px;
}

/* ===== Form Inputs ===== */
.login-form input {
  width: 100%;
  background-color: var(--panel-grey);
  border: 1px solid var(--divider-grey);
  border-radius: 6px;
  padding: 12px 14px;
  font-size: 14px;
  color: var(--text-primary);
  transition: var(--transition);
  margin-bottom: 8px;
}

.login-form input:focus {
  outline: none;
  border-color: var(--primary-accent);
  box-shadow: 0 0 0 2px rgba(0, 194, 194, 0.2);
}

.login-form input::placeholder {
  color: var(--text-secondary);
  opacity: 0.7;
}

/* ===== Form Rows ===== */
.form-row {
  display: flex;
  gap: 16px;
  margin-bottom: 8px;
}

.form-row input {
  margin-bottom: 0;
}

/* ===== Form Actions ===== */
.form-actions {
  display: flex;
  justify-content: space-between;
  margin-top: 24px;
  gap: 16px;
}

/* ===== Buttons ===== */
button {
  flex: 1;
  padding: 12px 20px;
  border: none;
  border-radius: 6px;
  font-weight: 600;
  font-size: 14px;
  cursor: pointer;
  transition: var(--transition);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
}

button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

button:not(:disabled):hover {
  transform: translateY(-1px);
}

/* Primary Button */
button[type='submit'] {
  background-color: var(--primary-accent);
  color: #0e111a;
}

button[type='submit']:not(:disabled):hover {
  background-color: var(--primary-hover);
}

/* Secondary Button */
.btn-secondary {
  background-color: transparent;
  color: var(--primary-accent);
  border: 1px solid var(--primary-accent) !important;
}

.btn-secondary:not(:disabled):hover {
  background-color: rgba(0, 194, 194, 0.1);
}

/* ===== Messages ===== */
.login-message {
  margin-top: 16px;
  padding: 12px 16px;
  border-radius: 6px;
  font-size: 14px;
  text-align: center;
  transition: var(--transition);
}

.login-message.success {
  background-color: rgba(34, 197, 94, 0.1);
  color: var(--success);
  border: 1px solid rgba(34, 197, 94, 0.2);
}

.login-message.error {
  background-color: rgba(239, 68, 68, 0.1);
  color: var(--danger);
  border: 1px solid rgba(239, 68, 68, 0.2);
}

/* ===== Responsive Design ===== */
@media (max-width: 768px) {
  .login-wrapper {
    padding: 16px;
  }
  
  .login-card {
    padding: 24px;
  }
  
  .form-row {
    flex-direction: column;
    gap: 8px;
  }
  
  .form-actions {
    flex-direction: column;
  }
  
  button {
    width: 100%;
  }
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\OrganizationForm.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\RegisterForm.vue =====
<template>
  <div>
    <div class="register-wrapper">
      <div class="register-container">
        <div class="register-card">
          <h2 class="register-title">NetSecure-IQ</h2>
          <h3 class="register-subtitle">Create your account</h3>

          <form @submit.prevent="register" class="register-form">
            <input v-model="email" type="email" placeholder="Email address" required />
            <button type="submit" :disabled="loading">
              {{ loading ? "Registering..." : "Register" }}
            </button>
          </form>

          <p v-if="message" class="register-message success">{{ message }}</p>
          <p v-if="error" class="register-message error">{{ error }}</p>

          <p class="register-footer">
            Already have an account?
            <router-link to="/login">Login</router-link>
          </p>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import { useRouter } from 'vue-router'

const email = ref('')
const message = ref('')
const error = ref('')
const loading = ref(false)
const router = useRouter()

const register = async () => {
  message.value = ''
  error.value = ''
  loading.value = true

  try {
    const res = await fetch(`${process.env.VUE_APP_BACKEND_URL}/api/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: email.value })
    })

    const data = await res.json()
    if (!res.ok) throw new Error(data.error || data.message || 'Registration failed')

    message.value = data.message || 'Registration successful. Check your email.'
    email.value = ''
    setTimeout(() => router.push('/login'), 3000)
  } catch (err) {
    error.value = err.message
  } finally {
    loading.value = false
  }
}
</script>

<style scoped>
:root {
  --bg-dark: #0e111a;
  --panel-grey: #1a1d26;
  --divider-grey: #2a2d36;
  --text-primary: #f5f7fa;
  --text-secondary: #9ca3af;
  --primary-accent: #00c2c2;
  --primary-hover: #00a7a7;
  --danger: #ef4444;
  --success: #22c55e;
}

.register-wrapper {
  position: relative; z-index: 10; display: flex; align-items: center; justify-content: center;
  padding: 32px; min-height: 100vh;
}

.register-wrapper, .register-wrapper * { color: var(--text-primary); font-family: 'Inter', sans-serif; }
.register-container { width: 100%; max-width: 420px; }

.register-card {
  background-color: var(--panel-grey); border-radius: 12px; padding: 32px;
  box-shadow: 0 0 40px rgba(0, 194, 194, 0.05); box-sizing: border-box; width: 100%;
}

.register-title { text-align: center; font-size: 20px; font-weight: 600; color: var(--primary-accent); margin-bottom: 8px; }
.register-subtitle { text-align: center; font-size: 16px; margin-bottom: 24px; }

.register-form { display: flex; flex-direction: column; gap: 16px; }
.register-form input, .register-form button { width: 100%; box-sizing: border-box; }

input {
  background-color: var(--panel-grey); border: 1px solid var(--divider-grey); border-radius: 6px;
  padding: 12px 14px; font-size: 14px; color: var(--text-primary); transition: border-color 0.2s ease;
}
input::placeholder { color: var(--text-secondary); }
input:focus { outline: none; border-color: var(--primary-accent); background-color: var(--bg-dark); }

button {
  background-color: var(--primary-accent); color: var(--bg-dark); border: none; border-radius: 6px;
  font-weight: 600; font-size: 14px; padding: 12px 20px; cursor: pointer; transition: all 0.2s ease;
}
button:hover { background-color: var(--primary-hover); color: var(--text-primary); }
button:disabled { background-color: #2f333d; color: #666; cursor: not-allowed; }

.register-message { margin-top: 16px; font-size: 14px; padding: 10px 12px; border-radius: 6px; text-align: center; }
.register-message.success { background-color: rgba(34, 197, 94, 0.1); color: var(--success); }
.register-message.error { background-color: rgba(239, 68, 68, 0.1); color: var(--danger); }

.register-footer { text-align: center; font-size: 13px; margin-top: 16px; color: var(--text-secondary); }
.register-footer a { color: var(--primary-accent); text-decoration: none; margin-left: 4px; }
.register-footer a:hover { color: var(--primary-hover); }
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\RegisterForm.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\RouterTable.vue =====
<template>
  <div class="router-table-page">
    <h2 style="margin-bottom: 1rem;">Router Status Table</h2>
    <table class="router-table" v-if="Array.isArray(routers) && routers.length">
      <thead>
        <tr>
          <th>#</th>
          <th>MAC Address</th>
          <th>Status</th>
          <th>Timestamp</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="(router, index) in routers" :key="router.mac">
          <td>{{ index + 1 }}</td>
          <td>{{ router.mac }}</td>
          <td :class="router.status === 'online' ? 'online' : 'offline'">{{ router.status }}</td>
          <td>{{ formatDate(router.time) }}</td>
        </tr>
      </tbody>
    </table>
    <p v-else>No routers found.</p>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'

const routers = ref([])

function formatDate(isoString) {
  const date = new Date(isoString)
  return date.toLocaleString()
}

onMounted(async () => {
  const token = localStorage.getItem('token')
  if (!token) {
    console.error('No JWT token found in localStorage')
    return
  }

  try {
    const response = await fetch(`${process.env.VUE_APP_BACKEND_URL}/api/data/routers`, {
      method: 'GET',
      headers: { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' }
    })

    const text = await response.text()
    if (!response.ok) {
      console.error('Error response:', text)
      throw new Error(text)
    }

    const data = JSON.parse(text)
    if (!Array.isArray(data)) {
      console.warn('Invalid router data:', data)
      routers.value = []
      return
    }

    routers.value = data.map(entry => ({
      mac: entry.mac,
      status: entry.value,
      time: entry.time
    }))
  } catch (err) {
    console.error('Error loading router status:', err.message)
    routers.value = []
  }
})
</script>

<style scoped>
.router-table-page { position: relative; z-index: 1; }

.router-table {
  width: 100%;
  border-collapse: collapse;
  font-family: Arial, sans-serif;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.router-table th,
.router-table td {
  padding: 12px 16px;
  border: 1px solid #ccc;
  text-align: left;
}

.router-table th { background-color: #f4f4f4; }
.router-table tr:hover { background-color: #f9f9f9; }
.online { color: green; font-weight: bold; }
.offline { color: red; font-weight: bold; }
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\RouterTable.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\TopNavigation.vue =====
<!-- src/frontend/src/components/TopNavigation.vue (Admin) -->
<template>
  <nav class="navbar">
    <!-- Left side: Brand and navigation links -->
    <div class="nav-left">
      <router-link to="/" class="brand">NetSecure-IQ</router-link>
      <router-link to="/" class="nav-link" :class="{ active: $route.path === '/' }">Home</router-link>

      <!-- non connectÃ© -->
      <template v-if="!isAuthenticated">
        <router-link to="/login" class="nav-link" :class="{ active: $route.path === '/login' }">Login</router-link>
        <router-link to="/register" class="nav-link" :class="{ active: $route.path === '/register' }">Register</router-link>
      </template>

      <!-- connectÃ© (ADMIN) -->
      <template v-else>
        <router-link to="/dashboard" class="nav-link" :class="{ active: $route.path === '/dashboard' }">Dashboard</router-link>
        <router-link to="/organizationForm" class="nav-link" :class="{ active: $route.path === '/organizationForm' }">Organisation</router-link>
        <router-link to="/routertable" class="nav-link" :class="{ active: $route.path === '/routertable' }">RouterTable</router-link>
        <router-link to="/adduser" class="nav-link" :class="{ active: $route.path === '/adduser' }">Add User</router-link>
        <router-link to="/addoperator" class="nav-link" :class="{ active: $route.path === '/addoperator' }">Add Operator</router-link>
        <router-link to="/agents" class="nav-link" :class="{ active: $route.path === '/agents' }">Agents</router-link>
        <router-link to="/agents/register" class="nav-link" :class="{ active: $route.path === '/agents/register' }">
          PrÃ©-enregistrement Agent
        </router-link>
        <button @click="logout" class="nav-link">Logout</button>
      </template>
    </div>

    <!-- Right side: role badge + Theme toggle -->
    <div class="nav-right">
      <div v-if="isAuthenticated" class="role-badge" title="Vous Ãªtes connectÃ© en tant qu'administrateur">
        <span class="dot online" aria-hidden="true"></span>
        <span class="role-text">Admin connectÃ©</span>
        <span v-if="hasOrganization" class="org-hint">org: {{ organizationId }}</span>
      </div>

      <button 
        class="theme-toggle" 
        @click="toggleTheme" 
        :aria-label="isDark ? 'Switch to light mode' : 'Switch to dark mode'"
      >
        <span v-if="isDark">â˜€ï¸</span>
        <span v-else>ðŸŒ™</span>
      </button>
    </div>
  </nav>
</template>

<script setup>
import { useAuth } from '@/composables/useAuth.js'
import { ref, computed, onMounted, onUnmounted } from 'vue'

const { isAuthenticated, logout } = useAuth()

/** Organisation: reactive via localStorage + events */
const organizationId = ref(localStorage.getItem('organization_id') || '')
const hasOrganization = computed(() => !!(organizationId.value && String(organizationId.value).trim()))
function syncOrgId() {
  organizationId.value = localStorage.getItem('organization_id') || ''
}

/** Light / Dark theme */
const theme = ref(localStorage.getItem('theme') || 'dark')
const isDark = computed(() => theme.value === 'dark')
function toggleTheme() {
  theme.value = isDark.value ? 'light' : 'dark'
  document.documentElement.setAttribute('data-theme', theme.value)
  localStorage.setItem('theme', theme.value)
}

onMounted(() => {
  document.documentElement.setAttribute('data-theme', theme.value)
  window.addEventListener('storage', syncOrgId)
  window.addEventListener('auth-changed', syncOrgId)
})
onUnmounted(() => {
  window.removeEventListener('storage', syncOrgId)
  window.removeEventListener('auth-changed', syncOrgId)
})
</script>

<style scoped>
:root {
  --bg-dark: #0e111a;
  --panel-grey: #1a1d26;
  --divider-grey: #2a2d36;
  --text-primary: #f5f7fa;
  --text-secondary: #9ca3af;
  --primary-accent: #00b4aa;
  --primary-hover: #008a8a;
  --success: #22c55e;
}

/* Navbar styles */
.navbar {
  position: fixed;
  top: 0; left: 0; right: 0;
  z-index: 1000;
  display: flex; align-items: center; justify-content: space-between;
  padding: 0 32px;
  height: 64px;
  background-color: var(--bg-dark);
  border-bottom: 1px solid var(--divider-grey);
  transition: background-color 0.3s ease;
}
[data-theme='light'] .navbar {
  background-color: #ffffff;
  box-shadow: 0 2px 10px rgba(0,0,0,0.05);
}

/* Left side */
.nav-left { display: flex; align-items: center; gap: 24px; }
.brand {
  font-weight: bold; font-size: 18px;
  color: var(--primary-accent);
  text-decoration: none;
  transition: color 0.2s ease;
}
.brand:hover { color: var(--primary-hover); }

.nav-link {
  color: var(--text-secondary);
  text-decoration: none;
  font-size: 14px;
  padding: 8px 12px;
  border-radius: 4px;
  transition: all 0.2s ease;
  background: transparent;
  border: none; /* pour le bouton Logout */
  cursor: pointer;
}
.nav-link:hover,
.nav-link.active {
  color: var(--primary-accent);
  background-color: rgba(0,194,194,0.1);
}
.nav-link.active { font-weight: 600; }

/* Right side */
.nav-right { margin-left: auto; display:flex; align-items:center; gap:12px; }

/* Role badge */
.role-badge {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  padding: 6px 10px;
  border-radius: 999px;
  background: rgba(34, 197, 94, 0.12);
  border: 1px solid rgba(34, 197, 94, 0.25);
  color: var(--text-primary);
  font-size: 12px;
}
.dot { width: 8px; height: 8px; border-radius: 50%; display: inline-block; }
.dot.online { background: var(--success); }
.role-text { font-weight: 600; }
.org-hint { opacity: .75; font-family: ui-monospace, SFMono-Regular, Menlo, monospace; }

/* Theme toggle */
.theme-toggle {
  background: none; border: none;
  color: var(--text-secondary);
  cursor: pointer;
  font-size: 1.25rem; padding: 8px;
  border-radius: 50%;
  transition: background-color 0.2s ease;
}
.theme-toggle:hover {
  background-color: var(--divider-grey);
  color: var(--text-primary);
}
[data-theme='light'] .theme-toggle:hover {
  background-color: rgba(0,0,0,0.05);
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\TopNavigation.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\TopNavigationOperator.vue =====
<!-- src/frontend/src/components/TopNavigationOperator.vue -->
<template>
    <nav class="navbar">
      <!-- Left: brand + liens -->
      <div class="nav-left">
        <router-link to="/" class="brand">NetSecure-IQ</router-link>
        <router-link to="/" class="nav-link" :class="{ active: $route.path === '/' }">Home</router-link>
  
        <!-- non connectÃ© -->
        <template v-if="!isAuthenticated">
          <router-link to="/login" class="nav-link" :class="{ active: $route.path === '/login' }">Login</router-link>
          <router-link to="/register" class="nav-link" :class="{ active: $route.path === '/register' }">Register</router-link>
        </template>
  
        <!-- connectÃ© (operator) -->
        <template v-else>
          <router-link to="/dashboard" class="nav-link" :class="{ active: $route.path === '/dashboard' }">Dashboard</router-link>
  
          <router-link
            to="/routertable"
            class="nav-link"
            :class="{ active: $route.path === '/routertable' }"
          >RouterTable</router-link>
  
          <router-link
            to="/organization"
            class="nav-link"
            :class="{ active: $route.path === '/organization' }"
          >Organisation</router-link>
  
          <!-- Add User seulement si rattachÃ© Ã  une organisation -->
          <router-link
            v-if="hasOrganization"
            to="/adduser"
            class="nav-link"
            :class="{ active: $route.path === '/adduser' }"
          >Add User</router-link>
  
          <!-- Agents & PrÃ©-enreg. visibles uniquement si org -->
          <router-link
            v-if="hasOrganization"
            to="/agents"
            class="nav-link"
            :class="{ active: $route.path === '/agents' }"
          >Agents</router-link>
  
          <router-link
            v-if="hasOrganization"
            to="/agents/register"
            class="nav-link"
            :class="{ active: $route.path === '/agents/register' }"
          >PrÃ©-enregistrement Agent</router-link>
  
          <button @click="logout" class="nav-link">Logout</button>
        </template>
      </div>
  
      <!-- Right: statut + Theme toggle -->
      <div class="nav-right">
        <div v-if="isAuthenticated" class="role-badge" title="Vous Ãªtes connectÃ© en tant qu'opÃ©rateur">
          <span class="dot online" aria-hidden="true"></span>
          <span class="role-text">Operator connectÃ©</span>
          <span v-if="hasOrganization" class="org-hint">org: {{ organizationId }}</span>
        </div>
  
        <button
          class="theme-toggle"
          @click="toggleTheme"
          :aria-label="isDark ? 'Passer au thÃ¨me clair' : 'Passer au thÃ¨me sombre'"
        >
          <span v-if="isDark">â˜€ï¸</span>
          <span v-else>ðŸŒ™</span>
        </button>
      </div>
    </nav>
  </template>
  
  <script setup>
  import { useAuth } from '@/composables/useAuth.js'
  import { ref, computed, onMounted, onUnmounted } from 'vue'
  
  const { isAuthenticated, logout } = useAuth()
  
  /** Organisation: reactive via localStorage + events */
  const organizationId = ref(localStorage.getItem('organization_id') || '')
  const hasOrganization = computed(
    () => !!(organizationId.value && String(organizationId.value).trim())
  )
  function syncOrgId() {
    organizationId.value = localStorage.getItem('organization_id') || ''
  }
  
  /** ThÃ¨me */
  const theme = ref(localStorage.getItem('theme') || 'dark')
  const isDark = computed(() => theme.value === 'dark')
  function toggleTheme() {
    theme.value = isDark.value ? 'light' : 'dark'
    document.documentElement.setAttribute('data-theme', theme.value)
    localStorage.setItem('theme', theme.value)
  }
  
  onMounted(() => {
    document.documentElement.setAttribute('data-theme', theme.value)
    window.addEventListener('storage', syncOrgId)
    window.addEventListener('auth-changed', syncOrgId)
  })
  onUnmounted(() => {
    window.removeEventListener('storage', syncOrgId)
    window.removeEventListener('auth-changed', syncOrgId)
  })
  </script>
  
  <style scoped>
  :root {
    --bg-dark: #0e111a;
    --panel-grey: #1a1d26;
    --divider-grey: #2a2d36;
    --text-primary: #f5f7fa;
    --text-secondary: #9ca3af;
    --primary-accent: #00b4aa;
    --primary-hover: #008a8a;
    --success: #22c55e;
  }
  
  /* Navbar */
  .navbar {
    position: fixed;
    top: 0; left: 0; right: 0;
    z-index: 1000;
    display: flex; align-items: center; justify-content: space-between;
    padding: 0 32px;
    height: 64px;
    background-color: var(--bg-dark);
    border-bottom: 1px solid var(--divider-grey);
    transition: background-color 0.3s ease;
  }
  [data-theme='light'] .navbar {
    background-color: #ffffff;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
  }
  
  /* Left side */
  .nav-left { display: flex; align-items: center; gap: 24px; }
  .brand {
    font-weight: bold; font-size: 18px;
    color: var(--primary-accent);
    text-decoration: none;
    transition: color 0.2s ease;
  }
  .brand:hover { color: var(--primary-hover); }
  
  .nav-link {
    color: var(--text-secondary);
    text-decoration: none;
    font-size: 14px;
    padding: 8px 12px;
    border-radius: 4px;
    transition: all 0.2s ease;
    background: transparent;
    border: none; /* pour le bouton Logout */
    cursor: pointer;
  }
  .nav-link:hover,
  .nav-link.active {
    color: var(--primary-accent);
    background-color: rgba(0,194,194,0.1);
  }
  .nav-link.active { font-weight: 600; }
  
  /* Right side */
  .nav-right { margin-left: auto; display:flex; align-items:center; gap:12px; }
  
  /* Role badge */
  .role-badge {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 6px 10px;
    border-radius: 999px;
    background: rgba(34, 197, 94, 0.12);
    border: 1px solid rgba(34, 197, 94, 0.25);
    color: var(--text-primary);
    font-size: 12px;
  }
  .dot {
    width: 8px; height: 8px; border-radius: 50%;
    display: inline-block;
  }
  .dot.online { background: var(--success); }
  .role-text { font-weight: 600; }
  .org-hint { opacity: .75; font-family: ui-monospace, SFMono-Regular, Menlo, monospace; }
  
  /* Theme toggle */
  .theme-toggle {
    background: none; border: none;
    color: var(--text-secondary);
    cursor: pointer;
    font-size: 1.25rem; padding: 8px;
    border-radius: 50%;
    transition: background-color 0.2s ease;
  }
  .theme-toggle:hover {
    background-color: var(--divider-grey);
    color: var(--text-primary);
  }
  [data-theme='light'] .theme-toggle:hover {
    background-color: rgba(0,0,0,0.05);
  }
  </style>
  

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\TopNavigationOperator.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\TopNavigationUser.vue =====
<!-- src/frontend/src/components/TopNavigationUser.vue -->
<template>
    <nav class="navbar">
      <!-- Left: brand + liens -->
      <div class="nav-left">
        <router-link to="/" class="brand">NetSecure-IQ</router-link>
        <router-link to="/" class="nav-link" :class="{ active: $route.path === '/' }">Home</router-link>
  
        <template v-if="!isAuthenticated">
          <router-link to="/login" class="nav-link" :class="{ active: $route.path === '/login' }">Login</router-link>
          <router-link to="/register" class="nav-link" :class="{ active: $route.path === '/register' }">Register</router-link>
        </template>
  
        <!-- connectÃ© (USER) -->
        <template v-else>
          <router-link to="/dashboard" class="nav-link" :class="{ active: $route.path === '/dashboard' }">Dashboard</router-link>
          <router-link to="/routertable" class="nav-link" :class="{ active: $route.path === '/routertable' }">RouterTable</router-link>
          <button @click="logout" class="nav-link">Logout</button>
        </template>
      </div>
  
      <!-- Right: statut + Theme toggle -->
      <div class="nav-right">
        <div v-if="isAuthenticated" class="role-badge" title="Vous Ãªtes connectÃ© en tant qu'utilisateur">
          <span class="dot online" aria-hidden="true"></span>
          <span class="role-text">User connectÃ©</span>
          <span v-if="hasOrganization" class="org-hint">org: {{ organizationId }}</span>
        </div>
  
        <button
          class="theme-toggle"
          @click="toggleTheme"
          :aria-label="isDark ? 'Passer au thÃ¨me clair' : 'Passer au thÃ¨me sombre'"
        >
          <span v-if="isDark">â˜€ï¸</span>
          <span v-else>ðŸŒ™</span>
        </button>
      </div>
    </nav>
  </template>
  
  <script setup>
  import { useAuth } from '@/composables/useAuth.js'
  import { ref, computed, onMounted, onUnmounted } from 'vue'
  
  const { isAuthenticated, logout } = useAuth()
  
  /** Organisation: reactive via localStorage + events */
  const organizationId = ref(localStorage.getItem('organization_id') || '')
  const hasOrganization = computed(() => !!(organizationId.value && String(organizationId.value).trim()))
  function syncOrgId() {
    organizationId.value = localStorage.getItem('organization_id') || ''
  }
  
  /** ThÃ¨me */
  const theme = ref(localStorage.getItem('theme') || 'dark')
  const isDark = computed(() => theme.value === 'dark')
  function toggleTheme() {
    theme.value = isDark.value ? 'light' : 'dark'
    document.documentElement.setAttribute('data-theme', theme.value)
    localStorage.setItem('theme', theme.value)
  }
  
  onMounted(() => {
    document.documentElement.setAttribute('data-theme', theme.value)
    window.addEventListener('storage', syncOrgId)
    window.addEventListener('auth-changed', syncOrgId)
  })
  onUnmounted(() => {
    window.removeEventListener('storage', syncOrgId)
    window.removeEventListener('auth-changed', syncOrgId)
  })
  </script>
  
  <style scoped>
  :root {
    --bg-dark: #0e111a;
    --panel-grey: #1a1d26;
    --divider-grey: #2a2d36;
    --text-primary: #f5f7fa;
    --text-secondary: #9ca3af;
    --primary-accent: #00b4aa;
    --primary-hover: #008a8a;
    --success: #22c55e;
  }
  
  /* Navbar */
  .navbar {
    position: fixed; top: 0; left: 0; right: 0;
    z-index: 1000;
    display: flex; align-items: center; justify-content: space-between;
    padding: 0 32px; height: 64px;
    background-color: var(--bg-dark);
    border-bottom: 1px solid var(--divider-grey);
    transition: background-color 0.3s ease;
  }
  [data-theme='light'] .navbar {
    background-color: #ffffff;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
  }
  
  .nav-left { display: flex; align-items: center; gap: 24px; }
  .brand {
    font-weight: 700; font-size: 18px;
    color: var(--primary-accent);
    text-decoration: none;
  }
  .brand:hover { color: var(--primary-hover); }
  
  .nav-link {
    color: var(--text-secondary);
    text-decoration: none;
    font-size: 14px;
    padding: 8px 12px;
    border-radius: 4px;
    transition: all 0.2s ease;
    background: transparent;
    border: none; /* pour le bouton Logout */
    cursor: pointer;
  }
  .nav-link:hover,
  .nav-link.active {
    color: var(--primary-accent);
    background-color: rgba(0,194,194,0.1);
  }
  .nav-link.active { font-weight: 600; }
  
  /* Right */
  .nav-right { margin-left: auto; display:flex; align-items:center; gap:12px; }
  
  /* Role badge */
  .role-badge {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    padding: 6px 10px;
    border-radius: 999px;
    background: rgba(34, 197, 94, 0.12);
    border: 1px solid rgba(34, 197, 94, 0.25);
    color: var(--text-primary);
    font-size: 12px;
  }
  .dot { width: 8px; height: 8px; border-radius: 50%; display: inline-block; }
  .dot.online { background: var(--success); }
  .role-text { font-weight: 600; }
  .org-hint { opacity: .75; font-family: ui-monospace, SFMono-Regular, Menlo, monospace; }
  
  /* Theme toggle */
  .theme-toggle {
    background: none; border: none;
    color: var(--text-secondary);
    cursor: pointer;
    font-size: 1.25rem; padding: 8px;
    border-radius: 50%;
    transition: background-color 0.2s ease;
  }
  .theme-toggle:hover {
    background-color: var(--divider-grey);
    color: var(--text-primary);
  }
  [data-theme='light'] .theme-toggle:hover { background-color: rgba(0,0,0,0.05); }
  </style>
  

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\TopNavigationUser.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\composables\useAuth.js =====
import { ref } from 'vue';

const isAuthenticated = ref(false);

function login() {
  isAuthenticated.value = true;
}

function logout() {
  isAuthenticated.value = false;
  window.location.reload();
}

export function useAuth() {
  return {
    isAuthenticated,
    login,
    logout,
  };
}

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\composables\useAuth.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\composables\useAuth.ts =====
import { ref, computed } from 'vue';

const user = ref<{ email: string } | null>(null);

export function useAuth() {
  function login(email: string) {
    user.value = { email };
  }
  function logout() {
    user.value = null;
  }
  const isAuthenticated = computed(() => !!user.value);
  return { user, isAuthenticated, login, logout };
}

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\composables\useAuth.ts =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\helpers\acl.js =====
// src/helpers/acl.js

export function can(user, needed) {
    if (!user) return false;
    const perms = new Set((user.permissions || []).map(String));
    const list = Array.isArray(needed) ? needed : (needed ? [needed] : []);
    return list.every(p => perms.has(String(p)));
  }
  
  // Aussi un export default pour compatibilitÃ©
  export default can;
  

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\helpers\acl.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\main.js =====
import { createApp } from 'vue'
import { createPinia } from 'pinia'
import App from './App.vue'
import router from './router'

const app = createApp(App)
app.use(createPinia())
app.use(router)
app.mount('#app')

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\main.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\router\index.js =====
import { createRouter, createWebHashHistory } from 'vue-router'
import HomePage from '@/components/HomePage.vue'
import LoginForm from '@/components/LoginForm.vue'
import RegisterForm from '@/components/RegisterForm.vue'
import DashboardPage from '@/components/DashboardPage.vue'
import DashboardOperator from '@/components/DashboardOperator.vue'
import OrganizationForm from '@/components/OrganizationForm.vue'
import OrganizationProfile from '@/components/organization/OrganizationProfile.vue'
import RouterTable from '@/components/RouterTable.vue'
import AddUserForm from '@/components/AddUserForm.vue'
import AddOperatorForm from '@/components/AddOperatorForm.vue'

import { useAuth } from '../composables/useAuth'

const AgentDashboard = () => import('@/views/agents/AgentDashboard.vue')
const RegisterAgent = () => import('@/views/agents/RegisterAgent.vue')

const routes = [
  { path: '/', component: HomePage },
  { path: '/login', component: LoginForm },
  { path: '/register', component: RegisterForm },
  { path: '/dashboard', component: DashboardPage, meta: { requiresAuth: true } },
  { path: '/dashboard/operator', component: DashboardOperator, meta: { requiresAuth: true } },
  { path: '/organization', component: OrganizationProfile, meta: { requiresAuth: true } },
  { path: '/organization/edit', component: OrganizationForm, meta: { requiresAuth: true } },
  { path: '/organizationForm', component: OrganizationForm, meta: { requiresAuth: true } },
  { path: '/routertable', component: RouterTable, meta: { requiresAuth: true } },
  { path: '/adduser', component: AddUserForm, meta: { requiresAuth: true } },
  { path: '/addoperator', component: AddOperatorForm, meta: { requiresAuth: true } },
  { path: '/agents', component: AgentDashboard, meta: { requiresAuth: true } },
  { path: '/agents/register', component: RegisterAgent, meta: { requiresAuth: true } }
]

const router = createRouter({
  history: createWebHashHistory(),
  routes
})

// Navigation guard
router.beforeEach((to, from, next) => {
  const { isAuthenticated } = useAuth()
  const role = (localStorage.getItem('role') || '').toLowerCase()
  const defaultDashboard = role === 'operator' ? '/dashboard/operator' : '/dashboard'

  if (to.meta.requiresAuth && !isAuthenticated.value) {
    return next('/login')
  }

  // Redirige les opÃ©rateurs vers leur dashboard dÃ©diÃ©
  if (to.path === '/dashboard' && role === 'operator') {
    return next('/dashboard/operator')
  }

  // Si dÃ©jÃ  connectÃ©, Ã©viter login/register
  if ((to.path === '/login' || to.path === '/register') && isAuthenticated.value) {
    return next(defaultDashboard)
  }

  next()
})

export default router

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\router\index.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\stores\authStore.js =====
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'

export const useAuthStore = defineStore('auth', () => {
  const token = ref(localStorage.getItem('token') || '')
  const user = ref(JSON.parse(localStorage.getItem('user') || 'null'))

  const isAuthenticated = computed(() => !!token.value)
  const role = computed(() => user.value?.role || null)

  function setAuth(newToken, newUser) {
    token.value = newToken
    user.value = newUser
    localStorage.setItem('token', newToken)
    localStorage.setItem('user', JSON.stringify(newUser))
  }

  function logout() {
    token.value = ''
    user.value = null
    localStorage.removeItem('token')
    localStorage.removeItem('user')
  }

  return { token, user, isAuthenticated, role, setAuth, logout }
})

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\stores\authStore.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\stores\authStore.ts =====
import { defineStore } from 'pinia';

interface User {
  email: string;
  role_id?: number;
  organization_id?: string | null;
}

export const useAuthStore = defineStore('auth', {
  state: () => ({
    isAuthenticated: false as boolean,
    user: null as User | null,
    token: '' as string,
  }),
  getters: {
    isAdmin: (s) => s.user?.role_id === 1,
    isOperator: (s) => s.user?.role_id === 2,
    isUser: (s) => s.user?.role_id === 3,
    role: (s) => s.user?.role_id ?? null,
  },
  actions: {
    setAuth(token: string, user: User) {
      this.isAuthenticated = true;
      this.token = token;
      this.user = user;
      localStorage.setItem('token', token);
      localStorage.setItem('user', JSON.stringify(user));
    },
    loadFromStorage() {
      const t = localStorage.getItem('token');
      const u = localStorage.getItem('user');
      this.token = t || '';
      this.user = u ? JSON.parse(u) as User : null;
      this.isAuthenticated = !!t;
    },
    logout() {
      this.isAuthenticated = false;
      this.user = null;
      this.token = '';
      localStorage.removeItem('token');
      localStorage.removeItem('user');
    },
  },
});

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\stores\authStore.ts =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\stores\siteStore.js =====
import { defineStore } from 'pinia'
import { useAuthStore } from './authStore'

export const useSiteStore = defineStore('site', {
  state: () => ({
    sites: [],
  }),
  actions: {
    async fetchSites() {
      const auth = useAuthStore()
      let url = '/api/sites'
      // Optionally add org/user filter params based on role
      this.sites = await fetch(url, {
        headers: { Authorization: `Bearer ${auth.token}` }
      }).then(r => r.json())
    }
  },
  getters: {
    filteredSites(state) {
      const auth = useAuthStore()
      if (auth.role === 'Administrator') return state.sites
      if (auth.role === 'Operator') return state.sites.filter(s => s.organization_id === auth.user.organization_id)
      if (auth.role === 'User') return state.sites.filter(s => auth.user.site_ids?.includes(s.id))
      return []
    }
  }
})

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\stores\siteStore.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\agents\AgentDashboard.vue =====
<template>
  <div class="page">
    <header class="header">
      <h2>Agents</h2>
      <router-link class="btn" to="/agents/register">PrÃ©-enregistrement</router-link>
    </header>

    <div class="stats">
      <div class="kpi ok"><b>{{ counts.associated }}</b><span>Associated</span></div>
      <div class="kpi warn"><b>{{ counts.unassociated }}</b><span>Unassociated</span></div>
      <div class="kpi ko"><b>{{ counts.deactivated }}</b><span>Deactivated</span></div>
    </div>

    <div class="toolbar">
      <input v-model.trim="q" placeholder="Search MAC / siteâ€¦" />
      <select v-model="filter">
        <option value="">All</option>
        <option value="ASSOCIATED">Associated</option>
        <option value="UNASSOCIATED">Unassociated</option>
        <option value="DEACTIVATED">Deactivated</option>
      </select>
      <button class="ghost" @click="load">Refresh</button>
    </div>

    <div v-if="loading" class="note">Loadingâ€¦</div>
    <div v-else-if="error" class="note err">{{ error }}</div>

    <table v-else class="grid">
      <thead>
        <tr>
          <th>MAC</th>
          <th>Status</th>
          <th>Site</th>
          <th>Last Seen</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="a in filtered" :key="a.id">
          <td><code>{{ a.mac_address }}</code></td>
          <td>
            <span class="badge" :class="statusClass(a.status)">{{ a.status }}</span>
          </td>
          <td>{{ a.site_name || 'â€”' }}</td>
          <td>{{ a.last_seen_at || 'â€”' }}</td>
          <td class="actions">
            <button v-if="a.status !== 'ASSOCIATED'" class="mini" @click="associate(a)">Associate</button>
            <button v-if="a.status !== 'DEACTIVATED'" class="mini warn" @click="deactivate(a)">Deactivate</button>
            <button class="mini ko" @click="remove(a)">Delete</button>
          </td>
        </tr>
        <tr v-if="!filtered.length">
          <td colspan="5" class="empty">No agents</td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import api from '@/utils/api'

const loading = ref(true)
const error   = ref('')
const agents  = ref([])

const q = ref('')
const filter = ref('')

const counts = computed(() => ({
  associated: agents.value.filter(a => a.status === 'ASSOCIATED').length,
  unassociated: agents.value.filter(a => a.status === 'UNASSOCIATED').length,
  deactivated: agents.value.filter(a => a.status === 'DEACTIVATED').length,
}))

const filtered = computed(() => {
  const term = q.value.toLowerCase()
  return agents.value.filter(a => {
    const okText = !term || [a.mac_address, a.site_name].join(' ').toLowerCase().includes(term)
    const okStat = !filter.value || a.status === filter.value
    return okText && okStat
  })
})

function statusClass(s) {
  return s === 'ASSOCIATED' ? 'ok' : s === 'UNASSOCIATED' ? 'warn' : 'ko'
}

async function load() {
  loading.value = true
  error.value = ''
  try {
    // endpoint attendu: GET /api/agents
    const { data } = await api.get('/agents')
    agents.value = Array.isArray(data) ? data : []
  } catch (e) {
    // backend pas encore prÃªt ? on tombe â€œgracefullyâ€
    error.value = e?.response?.data?.error || e.message || 'Failed to load agents'
    agents.value = []
  } finally {
    loading.value = false
  }
}

async function associate(a) {
  try {
    await api.post(`/agents/${a.id}/associate`)
    await load()
  } catch (e) { alert(e?.response?.data?.error || e.message) }
}
async function deactivate(a) {
  try {
    await api.post(`/agents/${a.id}/deactivate`)
    await load()
  } catch (e) { alert(e?.response?.data?.error || e.message) }
}
async function remove(a) {
  if (!confirm(`Delete agent ${a.mac_address}?`)) return
  try {
    await api.delete(`/agents/${a.id}`)
    await load()
  } catch (e) { alert(e?.response?.data?.error || e.message) }
}

onMounted(load)
</script>

<style scoped>
.page { padding: 96px 24px 24px; color: #f5f7fa; max-width: 1200px; margin: 0 auto; }
.header { display: flex; align-items: center; justify-content: space-between; margin-bottom: 16px; }
.header h2 { margin: 0; color: #00c2c2; }
.btn { background: #00c2c2; color:#0e111a; border:none; border-radius:8px; padding:10px 14px; font-weight:700; text-decoration:none; }
.stats { display: grid; grid-template-columns: repeat(3, 1fr); gap: 12px; margin-bottom: 12px; }
.kpi { border-radius: 12px; padding: 14px; border: 1px solid rgba(255,255,255,.06); background: rgba(255,255,255,.03); display: grid; gap: 4px; }
.kpi b { font-size: 22px; }
.kpi.ok { border-color: rgba(34,197,94,.25); }
.kpi.warn { border-color: rgba(234,179,8,.25); }
.kpi.ko { border-color: rgba(239,68,68,.25); }
.toolbar { display: flex; gap: 8px; margin: 12px 0; }
.toolbar input, .toolbar select { background:#1a1d26; border:1px solid #2a2d36; color:#f5f7fa; border-radius:8px; padding:10px 12px; }
.toolbar .ghost { background: transparent; color:#00c2c2; border:1px solid #00c2c2; border-radius:8px; padding:10px 12px; }
.note { background: rgba(255,255,255,.06); border: 1px solid rgba(255,255,255,.08); border-radius: 12px; padding: 12px 14px; }
.note.err { color:#ef4444; border-color: rgba(239,68,68,.35); background: rgba(239,68,68,.12); }
.grid { width: 100%; border-collapse: collapse; border: 1px solid rgba(255,255,255,.08); }
th, td { border-bottom: 1px solid rgba(255,255,255,.08); padding: 10px; text-align: left; }
.badge { padding: 4px 8px; border-radius: 999px; font-size: 12px; text-transform: uppercase; letter-spacing: .03em; }
.badge.ok { background: rgba(34,197,94,.1); color:#22c55e; border:1px solid rgba(34,197,94,.2); }
.badge.warn { background: rgba(234,179,8,.1); color:#eab308; border:1px solid rgba(234,179,8,.25); }
.badge.ko { background: rgba(239,68,68,.1); color:#ef4444; border:1px solid rgba(239,68,68,.25); }
.actions .mini { padding:6px 8px; border-radius:8px; border:none; background:#00c2c2; color:#0e111a; margin-right:6px; }
.actions .mini.warn { background:#eab308; color:#0e111a; }
.actions .mini.ko { background:#ef4444; color:#fff; }
.empty { text-align:center; opacity:.85; }
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\agents\AgentDashboard.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\agents\index.ts =====
export { default as AgentDashboard } from './AgentDashboard.vue';
export { default as RegisterAgent } from './RegisterAgent.vue';

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\agents\index.ts =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\agents\RegisterAgent.vue =====
<template>
  <div class="register-agent-page">
    <div class="register-agent">
      <h1>PrÃ©-enregistrement dâ€™un agent MikroTik</h1>
      <form @submit.prevent="onSubmit">
        <label for="mac">Adresse MAC principale (ether1):</label>
        <input id="mac" v-model="mac" required placeholder="AA:BB:CC:DD:EE:FF" />
        <button type="submit" :disabled="loading">GÃ©nÃ©rer le script</button>
      </form>
      <div v-if="loading" class="loading">GÃ©nÃ©ration du script...</div>
      <div v-if="script">
        <label>Script gÃ©nÃ©rÃ© :</label>
        <textarea readonly rows="8" :value="script"></textarea>
        <div class="actions">
          <button @click="copyScript">Copier</button>
          <button @click="downloadScript">TÃ©lÃ©charger</button>
          <button @click="testAgent" :disabled="testing">Test</button>
          <button @click="cancelRegistration" :disabled="testing">Annuler lâ€™inscription</button>
        </div>
        <div v-if="testing" class="loading">Test de connexion...</div>
        <div v-if="testResult === true" class="success">Agent en ligne, peer dÃ©sactivÃ© et retour Ã  la liste.</div>
        <div v-if="testResult === false" class="error">Ã‰chec du test, vÃ©rifiez la connexion de lâ€™agent.</div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import { useRouter } from 'vue-router'

const mac = ref('')
const script = ref('')
const loading = ref(false)
const testing = ref(false)
const testResult = ref(null)
const router = useRouter()

function onSubmit() {
  loading.value = true
  setTimeout(() => {
    script.value = `/interface/wireguard/add listen-port=13231 private-key=...\n/interface/wireguard/peers/add public-key=... allowed-address=...`
    loading.value = false
  }, 1500)
}
function copyScript() { navigator.clipboard.writeText(script.value) }
function downloadScript() {
  const blob = new Blob([script.value], { type: 'text/plain' })
  const link = document.createElement('a')
  link.href = URL.createObjectURL(blob)
  link.download = `mikrotik-script-${mac.value}.rsc`
  link.click()
}
function testAgent() {
  testing.value = true
  testResult.value = null
  setTimeout(() => {
    const success = Math.random() > 0.5
    testResult.value = success
    testing.value = false
    if (success) setTimeout(() => router.push('/agents'), 1000)
  }, 1500)
}
function cancelRegistration() {
  script.value = ''
  mac.value = ''
  testResult.value = null
}
</script>

<style scoped>
.register-agent { padding: 2rem; max-width: 600px; margin: auto; position: relative; z-index: 1; }
form { margin-bottom: 1rem; }
input { margin-right: 1rem; }
textarea { width: 100%; margin-bottom: 1rem; }
.actions { display: flex; gap: 1rem; }
.loading { color: #1976d2; font-weight: bold; }
.success { color: #4caf50; font-weight: bold; }
.error { color: #f44336; font-weight: bold; }
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\agents\RegisterAgent.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\Login.vue =====
<template>
  <div class="login-container">
    <h1>Connexion</h1>
    <form @submit.prevent="onLogin">
      <div class="form-group">
        <label for="email">Email</label>
        <input id="email" v-model="email" type="email" required />
      </div>
      <div class="form-group">
        <label for="password">Mot de passe</label>
        <input id="password" v-model="password" type="password" required />
      </div>
      <button type="submit" :disabled="loading">Se connecter</button>
      <div v-if="error" class="error">{{ error }}</div>
    </form>
  </div>
</template>

<script setup>
defineOptions({ name: 'LoginPage' })
import { ref } from 'vue'
import { useRouter } from 'vue-router'
import { useAuthStore } from '@/stores/authStore'

const email = ref('')
const password = ref('')
const loading = ref(false)
const error = ref('')
const router = useRouter()
const auth = useAuthStore()

async function onLogin() {
  loading.value = true
  error.value = ''
  try {
    // Remplacer par un vrai appel API plus tard
    if (email.value === 'admin@example.com' && password.value === 'admin') {
      auth.isAuthenticated = true
      auth.user = { email: email.value, role_id: 1 } // Admin
      auth.token = 'fake-token'
      router.push('/')
    } else if (email.value === 'operator@example.com' && password.value === 'operator') {
      auth.isAuthenticated = true
      auth.user = { email: email.value, role_id: 2 } // Operator
      auth.token = 'fake-token'
      router.push('/')
    } else if (email.value === 'user@example.com' && password.value === 'user') {
      auth.isAuthenticated = true
      auth.user = { email: email.value, role_id: 3 } // User
      auth.token = 'fake-token'
      router.push('/')
    } else {
      throw new Error('Identifiants invalides')
    }
  } catch (e) {
    error.value = e.message || 'Erreur de connexion'
  } finally {
    loading.value = false
  }
}
</script>

<style scoped>
.login-container {
  max-width: 350px;
  margin: 4rem auto;
  background: #181b23;
  border-radius: 8px;
  padding: 2rem;
  box-shadow: 0 4px 16px rgba(0,0,0,0.25);
  color: #f5f7fa;
}
h1 {
  margin-bottom: 1.5rem;
  font-size: 1.6rem;
  text-align: center;
}
.form-group {
  margin-bottom: 1rem;
}
label {
  display: block;
  margin-bottom: 0.3rem;
}
input {
  width: 100%;
  padding: 0.6rem;
  border-radius: 4px;
  border: 1px solid #2a2d36;
  background: #232635;
  color: #f5f7fa;
}
button {
  width: 100%;
  padding: 0.7rem;
  background: #00b4aa;
  color: #fff;
  border: none;
  border-radius: 4px;
  font-weight: bold;
  cursor: pointer;
  margin-top: 1rem;
  transition: background 0.2s;
}
button:disabled {
  background: #555a;
  cursor: not-allowed;
}
.error {
  color: #f44336;
  font-weight: bold;
  margin-top: 1rem;
  text-align: center;
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\Login.vue =====

