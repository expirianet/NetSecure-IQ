===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\handlers\agent.go =====
package handlers

import (
    "github.com/gofiber/fiber/v2"
    "github.com/yourorg/yourapp/internal/models"
    "github.com/yourorg/yourapp/internal/wireguard"
    "github.com/google/uuid"
    "gorm.io/gorm"
)

func PreRegisterAgent(db *gorm.DB) fiber.Handler {
    return func(c *fiber.Ctx) error {
        var req struct {
            MacAddress string `json:"mac_address"`
        }
        if err := c.BodyParser(&req); err != nil {
            return fiber.ErrBadRequest
        }
        var agent models.Agent
        if err := db.Where("mac_address = ?", req.MacAddress).First(&agent).Error; err == nil {
            return fiber.NewError(fiber.StatusConflict, "Agent already registered")
        }
        peer, script, err := wireguard.CreatePeerAndScript(req.MacAddress)
        if err != nil {
            return fiber.ErrInternalServerError
        }
        agent = models.Agent{
            ID:              uuid.New(),
            MacAddress:      req.MacAddress,
            Status:          "unassociated",
            WireGuardPeerID: peer.ID,
        }
        if err := db.Create(&agent).Error; err != nil {
            return fiber.ErrInternalServerError
        }
        return c.JSON(fiber.Map{
            "script": script,
            "agent":  agent,
        })
    }
}

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\handlers\agent.go =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\models\agent.go =====
package models

import (
    "github.com/google/uuid"
    "time"
)

type Agent struct {
    ID              uuid.UUID `gorm:"type:uuid;primaryKey"`
    MacAddress      string    `gorm:"uniqueIndex"`
    Status          string    // unassociated, associated, deactivated
    WireGuardPeerID uuid.UUID
    CreatedAt       time.Time
    UpdatedAt       time.Time
}

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\models\agent.go =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\wireguard\wg.go =====
package wireguard

import (
    "crypto/rand"
    "encoding/base64"
    "fmt"
    "github.com/google/uuid"
)

type Peer struct {
    ID         uuid.UUID
    PrivateKey string
    PublicKey  string
    IPAddress  string
    Enabled    bool
}

func GenerateKeyPair() (privateKey, publicKey string, err error) {
    priv := make([]byte, 32)
    _, err = rand.Read(priv)
    if err != nil {
        return "", "", err
    }
    privateKey = base64.StdEncoding.EncodeToString(priv)
    publicKey = base64.StdEncoding.EncodeToString([]byte(reverse(string(priv))))
    return privateKey, publicKey, nil
}

func reverse(s string) string {
    runes := []rune(s)
    for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {
        runes[i], runes[j] = runes[j], runes[i]
    }
    return string(runes)
}

func CreatePeerAndScript(mac string) (*Peer, string, error) {
    priv, pub, err := GenerateKeyPair()
    if err != nil {
        return nil, "", err
    }
    peer := &Peer{
        ID:         uuid.New(),
        PrivateKey: priv,
        PublicKey:  pub,
        IPAddress:  fmt.Sprintf("10.10.10.%d/32", randByte()),
        Enabled:    false,
    }
    script := GenerateMikrotikScript(peer, mac)
    return peer, script, nil
}

func randByte() int {
    b := make([]byte, 1)
    rand.Read(b)
    return int(b[0])
}

func GenerateMikrotikScript(peer *Peer, mac string) string {
    return fmt.Sprintf(`
# MikroTik WireGuard onboarding script
/interface wireguard add name=wg0 private-key="%s"
/ip address add address=%s interface=wg0
/interface wireguard peers add public-key="SERVER_PUBLIC_KEY" endpoint-address="vpn.example.com" endpoint-port=51820 allowed-address=0.0.0.0/0
# MAC: %s
`, peer.PrivateKey, peer.IPAddress, mac)
}

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\backend\internal\wireguard\wg.go =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\App.vue =====
<template>
  <div id="app">
    <!-- Barre de navigation personnalisÃ©e -->
    <TopNavigation />
    
    <!-- Contenu principal -->
    <main class="main-content">
      <router-view />
    </main>

    <!-- Canvas pour particles.js -->
    <div id="particles-js"></div>
    <!-- Le bouton de basculement de thÃ¨me a Ã©tÃ© supprimÃ© -->
  </div>
</template>

<script setup>
import { ref, watch, onMounted } from 'vue'
import TopNavigation from '@/components/navigation/TopNavigation.vue'
// -- Ã‰tat du thÃ¨me
const theme = ref(localStorage.getItem('theme') || 'dark')

// -- Mettre Ã  jour l'attribut data-theme sur <html>
watch(theme, (newTheme) => {
  document.documentElement.setAttribute('data-theme', newTheme)
})

// -- Fonction d'initialisation de particles.js
function initParticles() {
  const dark = theme.value === 'dark'
  if (!window.particlesJS) return

  // Destruction de l'ancien canvas
  const oldCanvas = document.querySelector('#particles-js > canvas')
  if (oldCanvas) oldCanvas.remove()

  // Configuration des particules
  window.particlesJS('particles-js', {
    particles: {
      number: { value: 80, density: { enable: true, value_area: 800 } },
      color: { value: dark ? '#ffffff' : '#888888' },
      shape: { type: 'circle' },
      opacity: { value: dark ? 0.5 : 0.3 },
      size: { value: 3, random: true },
      line_linked: {
        enable: true,
        distance: 150,
        color: dark ? '#ffffff' : '#E0E0E0',
        opacity: dark ? 0.4 : 0.3,
        width: 1
      },
      move: { enable: true, speed: 6, direction: 'none', out_mode: 'bounce' }
    },
    interactivity: {
      detect_on: 'canvas',
      events: {
        onhover: { enable: true, mode: 'repulse' },
        onclick: { enable: true, mode: 'push' },
        resize: true
      },
      modes: {
        repulse: { distance: 200 },
        push: { particles_nb: 4 }
      }
    },
    retina_detect: true
  })
}

// -- Monter le composant
onMounted(() => {
  // Appliquer d'abord le thÃ¨me
  document.documentElement.setAttribute('data-theme', theme.value)

  // Charger dynamiquement particles.min.js si nÃ©cessaire
  if (!window.particlesJS) {
    const script = document.createElement('script')
    script.src = '/particles/particles.min.js'
    script.onload = () => {
      initParticles()
      const observer = new MutationObserver(() => initParticles())
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ['data-theme']
      })
    }
    document.body.appendChild(script)
  } else {
    initParticles()
    const observer = new MutationObserver(() => initParticles())
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['data-theme']
    })
  }
})
</script>

<style>
/* Variables par dÃ©faut */
:root {
  --bg-dark: #0e111a;
  --panel-grey: #1a1d26;
  --divider-grey: #2a2d36;
  --text-primary: #f5f7fa;
  --text-secondary: #9ca3af;
  --primary-accent: #00c2c2;
  --primary-hover: #00a7a7;
  --danger: #ef4444;
  --success: #22c55e;
}

/* Override pour le mode clair */
[data-theme='light'] {
  --bg-dark: #ffffff;
  --panel-grey: #f5f5f5;
  --divider-grey: #e0e0e0;
  --text-primary: #1f2937;
  --text-secondary: #6b7280;
  --primary-accent: #00a8a8;
  --primary-hover: #008a8a;
  --danger: #dc2626;
  --success: #22c55e;
}

/* Style global */
body {
  margin: 0;
  padding: 0;
  background-color: var(--bg-dark);
  color: var(--text-primary);
  font-family: 'Inter', sans-serif;
  transition: background-color 0.3s ease, color 0.3s ease;
  min-height: 100vh;
}

/* Contenu principal */
.main-content {
  padding-top: 80px; /* Hauteur de la barre de navigation */
  min-height: calc(100vh - 80px);
  box-sizing: border-box;
}

/* Reset des marges et paddings */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

/* Navbar */
nav {
  position: relative;
  z-index: 20;
  padding: 16px;
  background-color: var(--panel-grey);
  border-bottom: 1px solid var(--divider-grey);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.nav-links a {
  margin: 0 8px;
  color: var(--primary-accent);
  text-decoration: none;
}
.nav-links a:hover {
  color: var(--primary-hover);
}

/* Canvas particles */
#particles-js {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: -1;
  background-color: var(--bg-dark);
  transition: background-color 0.3s ease;
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\App.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\babelconfig.js =====
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\babelconfig.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\charts\LineChart.vue =====
<template>
  <div class="chart-container">
    <canvas ref="chartCanvas"></canvas>
  </div>
</template>

<script>
import { ref, onMounted, watch } from 'vue';
import Chart from 'chart.js/auto';

export default {
  name: 'LineChart',
  props: {
    chartData: {
      type: Object,
      required: true,
      default: () => ({
        labels: [],
        datasets: []
      })
    },
    options: {
      type: Object,
      default: () => ({
        responsive: true,
        maintainAspectRatio: false
      })
    }
  },
  setup(props) {
    const chartCanvas = ref(null);
    let chart = null;

    const initChart = () => {
      if (!chartCanvas.value) return;
      
      if (chart) {
        chart.destroy();
      }
      
      const ctx = chartCanvas.value.getContext('2d');
      if (!ctx) return;
      
      chart = new Chart(ctx, {
        type: 'line',
        data: props.chartData,
        options: {
          ...props.options,
          responsive: true,
          maintainAspectRatio: false,
        },
      });
    };

    onMounted(() => {
      initChart();
    });

    watch(() => props.chartData, () => {
      initChart();
    }, { deep: true });

    return {
      chartCanvas
    };
  }
};
</script>

<style scoped>
.chart-container {
  position: relative;
  height: 100%;
  min-height: 250px;
  width: 100%;
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\charts\LineChart.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\common\BackgroundParticles.vue =====
<template>
  <div id="particles-js"></div>
</template>

<script setup>
import { onMounted, onUnmounted } from 'vue';
import 'particles.js';

let particlesInstance = null;

const initializeParticles = () => {
  if (window.particlesJS) {
    particlesInstance = window.particlesJS('particles-js', {
      particles: {
        number: {
          value: 80,
          density: {
            enable: true,
            value_area: 800
          }
        },
        color: {
          value: '#3B82F6' // blue-500
        },
        shape: {
          type: 'circle'
        },
        opacity: {
          value: 0.5,
          random: true
        },
        size: {
          value: 3,
          random: true
        },
        line_linked: {
          enable: true,
          distance: 150,
          color: '#93C5FD', // blue-300
          opacity: 0.4,
          width: 1
        },
        move: {
          enable: true,
          speed: 2,
          direction: 'none',
          random: true,
          straight: false,
          out_mode: 'out',
          bounce: false
        }
      },
      interactivity: {
        detect_on: 'canvas',
        events: {
          onhover: {
            enable: true,
            mode: 'grab'
          },
          onclick: {
            enable: false
          },
          resize: true
        },
        modes: {
          grab: {
            distance: 140,
            line_linked: {
              opacity: 1
            }
          }
        }
      },
      retina_detect: true
    });
  }
};

const handleResize = () => {
  if (particlesInstance && particlesInstance.pJSDom && particlesInstance.pJSDom.length > 0) {
    particlesInstance.pJSDom[0].pJS.particles.move.speed = window.innerWidth < 768 ? 1 : 2;
    particlesInstance.pJSDom[0].pJS.fn.particlesRefresh();
  }
};

onMounted(() => {
  // Load particles.js dynamically if not already loaded
  if (!window.particlesJS) {
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js';
    script.onload = () => {
      initializeParticles();
      window.addEventListener('resize', handleResize);
    };
    document.head.appendChild(script);
  } else {
    initializeParticles();
    window.addEventListener('resize', handleResize);
  }
});

onUnmounted(() => {
  window.removeEventListener('resize', handleResize);
  if (particlesInstance && particlesInstance.pJSDom && particlesInstance.pJSDom[0]) {
    particlesInstance.pJSDom[0].pJS.fn.vendors.destroypJS();
    particlesInstance = null;
  }
});
</script>

<style scoped>
#particles-js {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
  background-color: var(--bg-page);
  opacity: 0.6;
}

/* Dark mode adjustments */
:root[data-theme="dark"] #particles-js {
  background-color: var(--bg-page);
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\common\BackgroundParticles.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\forms\AddOperatorForm.vue =====
<template>
  <div class="add-operator-page">
    <h2>Add New Operator</h2>

    <form @submit.prevent="submitForm">
      <div>
        <label>Email:</label>
        <input v-model="email" type="email" required />
      </div>

      <div>
        <label>First Name:</label>
        <input v-model="firstName" type="text" required />
      </div>

      <div>
        <label>Last Name:</label>
        <input v-model="lastName" type="text" required />
      </div>

      <button type="submit">Add Operator</button>
      <p v-if="message">{{ message }}</p>
    </form>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import jwtDecode from 'jwt-decode'  // attention Ã  l'import par dÃ©faut

const email = ref('')
const firstName = ref('')
const lastName = ref('')
const message = ref('')

const submitForm = async () => {
  try {
    const token = localStorage.getItem('token')
    const decoded = jwtDecode(token)
    const organization_id = decoded.organization_id

    const payload = {
      email: email.value,
      first_name: firstName.value,
      last_name: lastName.value,
      role: 'operator',
    }
    if (organization_id) {
      payload.organization_id = String(organization_id)
    }

    const res = await fetch(
      `${process.env.VUE_APP_BACKEND_URL}/api/users`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer ' + token,
        },
        body: JSON.stringify(payload),
      }
    )
    const data = await res.json().catch(() => ({ error: 'Invalid response' }))
    message.value = res.ok
      ? 'âœ… Operator created successfully!'
      : 'âŒ Failed: ' + (data.error || data.message)
  } catch (err) {
    message.value = 'âŒ Internal error: ' + err.message
  }
}
</script>

<style scoped>
.add-operator-page {
  max-width: 480px;
  margin: 2rem auto;
  padding: 2rem;
  background: var(--panel-grey);
  border-radius: 8px;
}
.add-operator-page h2 {
  margin-bottom: 1rem;
  color: var(--primary-accent);
}
.add-operator-page form div {
  margin-bottom: 0.75rem;
}
.add-operator-page label {
  display: block;
  margin-bottom: 0.25rem;
  color: var(--text-secondary);
}
.add-operator-page input {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid var(--divider-grey);
  border-radius: 4px;
  background: var(--bg-dark);
  color: var(--text-primary);
}
.add-operator-page button {
  margin-top: 1rem;
  background: var(--primary-accent);
  color: #fff;
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
.add-operator-page p {
  margin-top: 0.5rem;
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\forms\AddOperatorForm.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\forms\AddUserForm.vue =====
<template>
  <div class="add-user-page">
    <h2>Add New User</h2>

    <form @submit.prevent="submitForm">
      <div>
        <label>First Name:</label>
        <input v-model="firstName" type="text" required />
      </div>

      <div>
        <label>Last Name:</label>
        <input v-model="lastName" type="text" required />
      </div>

      <div>
        <label>Email:</label>
        <input v-model="email" type="email" required />
      </div>

      <div v-if="isAdmin">
        <label>Select Organization:</label>
        <select v-model="selectedOrg" required>
          <option v-for="org in organizations" :key="org.id" :value="org.id">
            {{ org.name }}
          </option>
        </select>
      </div>

      <button type="submit">Add User</button>
      <p v-if="message">{{ message }}</p>
    </form>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'

const email = ref('')
const firstName = ref('')
const lastName = ref('')
const organizations = ref([])
const selectedOrg = ref(null)
const message = ref('')

const role = localStorage.getItem('role')
const userOrgId = localStorage.getItem('organization_id')
const isAdmin = role === 'administrator'

onMounted(async () => {
  if (isAdmin) {
    const res = await fetch(
      `${process.env.VUE_APP_BACKEND_URL}/api/organizations`,
      {
        headers: {
          Authorization: 'Bearer ' + localStorage.getItem('token'),
        },
      }
    )
    const data = await res.json().catch(() => ({ organizations: [] }))
    organizations.value = data.organizations || []
  }
})

const submitForm = async () => {
  const payload = {
    email: email.value,
    first_name: firstName.value,
    last_name: lastName.value,
    organization_id: isAdmin ? selectedOrg.value : userOrgId,
  }

  const res = await fetch(
    `${process.env.VUE_APP_BACKEND_URL}/api/users`,
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: 'Bearer ' + localStorage.getItem('token'),
      },
      body: JSON.stringify(payload),
    }
  )
  const data = await res.json().catch(() => ({ error: 'Invalid response' }))
  message.value = res.ok
    ? 'âœ… User created and password sent via email!'
    : 'âŒ Failed: ' + (data.error || data.message)
}
</script>

<style scoped>
.add-user-page {
  max-width: 480px;
  margin: 2rem auto;
  padding: 2rem;
  background: var(--panel-grey);
  border-radius: 8px;
}
.add-user-page h2 {
  margin-bottom: 1rem;
  color: var(--primary-accent);
}
.add-user-page form div {
  margin-bottom: 0.75rem;
}
.add-user-page label {
  display: block;
  margin-bottom: 0.25rem;
  color: var(--text-secondary);
}
.add-user-page input,
.add-user-page select {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid var(--divider-grey);
  border-radius: 4px;
  background: var(--bg-dark);
  color: var(--text-primary);
}
.add-user-page button {
  margin-top: 1rem;
  background: var(--primary-accent);
  color: #fff;
  padding: 0.5rem 1rem;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}
.add-user-page p {
  margin-top: 0.5rem;
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\forms\AddUserForm.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\HelloWorld.vue =====
<template>
  <div class="hello">
    <h1>{{ msg }}</h1>
    <p>
      For a guide and recipes on how to configure / customize this project,<br>
      check out the
      <a href="https://cli.vuejs.org" target="_blank" rel="noopener">vue-cli documentation</a>.
    </p>
    <h3>Installed CLI Plugins</h3>
    <ul>
      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel" target="_blank" rel="noopener">babel</a></li>
      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint" target="_blank" rel="noopener">eslint</a></li>
    </ul>
    <h3>Essential Links</h3>
    <ul>
      <li><a href="https://vuejs.org" target="_blank" rel="noopener">Core Docs</a></li>
      <li><a href="https://forum.vuejs.org" target="_blank" rel="noopener">Forum</a></li>
      <li><a href="https://chat.vuejs.org" target="_blank" rel="noopener">Community Chat</a></li>
      <li><a href="https://twitter.com/vuejs" target="_blank" rel="noopener">Twitter</a></li>
      <li><a href="https://news.vuejs.org" target="_blank" rel="noopener">News</a></li>
    </ul>
    <h3>Ecosystem</h3>
    <ul>
      <li><a href="https://router.vuejs.org" target="_blank" rel="noopener">vue-router</a></li>
      <li><a href="https://vuex.vuejs.org" target="_blank" rel="noopener">vuex</a></li>
      <li><a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener">vue-devtools</a></li>
      <li><a href="https://vue-loader.vuejs.org" target="_blank" rel="noopener">vue-loader</a></li>
      <li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">awesome-vue</a></li>
    </ul>
  </div>
</template>

<script>
export default {
  name: 'HelloWorld',
  props: {
    msg: String
  }
}
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
h3 {
  margin: 40px 0 0;
}
ul {
  list-style-type: none;
  padding: 0;
}
li {
  display: inline-block;
  margin: 0 10px;
}
a {
  color: #42b983;
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\HelloWorld.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\home\HomePage.vue =====
<template>
  <div class="home-page">
    <!-- Canvas animÃ© -->
    <div id="particles-js"></div>

    <!-- Contenu principal -->
    <div class="home-wrapper">
      <div class="home-container">
        <div class="home-card">
          <h1 class="welcome-title">Welcome to NetSecure-IQ</h1>
          <p class="welcome-subtitle">Your network security management solution</p>
          <router-link to="/login" class="login-button">Get Started</router-link>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { onMounted } from 'vue';

/**
 * Initialise ou recharge particles.js en fonction du thÃ¨me actuel.
 */
function renderParticles() {
  const dark = document.documentElement.getAttribute('data-theme') === 'dark';
  // Supprime l'ancien canvas s'il existe
  const old = document.querySelector('#particles-js > canvas');
  if (old) old.remove();

  // (Re)initialise particlesJS
  window.particlesJS('particles-js', {
    particles: {
      number: { value: 80, density: { enable: true, value_area: 800 } },
      color: { value: dark ? '#ffffff' : '#555555' },
      shape: { type: 'circle' },
      opacity: { value: dark ? 0.5 : 0.5 },
      size: { value: 3, random: true },
      line_linked: {
        enable: true,
        distance: 150,
        color: dark ? '#ffffff' : '#888888',
        opacity: dark ? 0.4 : 0.4,
        width: 1
      },
      move: { enable: true, speed: 6, direction: 'none', out_mode: 'bounce' }
    },
    interactivity: {
      detect_on: 'canvas',
      events: {
        onhover: { enable: true, mode: 'repulse' },
        onclick: { enable: true, mode: 'push' },
        resize: true
      },
      modes: {
        repulse: { distance: 200 },
        push: { particles_nb: 4 }
      }
    },
    retina_detect: true
  });
}

onMounted(() => {
  // Charge le script particles.min.js s'il n'est pas dÃ©jÃ  chargÃ©
  if (!window.particlesJS) {
    const script = document.createElement('script');
    script.src = '/particles/particles.min.js';
    script.onload = () => {
      renderParticles();
      setupThemeObserver();
    };
    document.body.appendChild(script);
  } else {
    renderParticles();
    setupThemeObserver();
  }
});

function setupThemeObserver() {
  // Observe les changements de thÃ¨me
  const obs = new MutationObserver((mutations) => {
    for (const m of mutations) {
      if (m.attributeName === 'data-theme') {
        renderParticles();
      }
    }
  });
  
  obs.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['data-theme']
  });
}
</script>

<style scoped>
:root {
  --bg-dark: #0e111a;
  --panel-grey: #1a1d26;
  --divider-grey: #2a2d36;
  --text-primary: #f5f7fa;
  --text-secondary: #9ca3af;
  --primary-accent: #00c2c2;
  --primary-hover: #00a7a7;
  --danger: #ef4444;
  --success: #22c55e;
}

/* Page entiÃ¨re */
.home-page {
  position: relative;
  min-height: 100vh;
  overflow: hidden;
}

/* Canvas particles */
#particles-js {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: 0;
  background-color: var(--bg-dark);
  transition: background-color 0.3s ease;
}

/* override light mode */
[data-theme='light'] #particles-js {
  background-color: #E0E0E0;
}

/* Wrapper du contenu */
.home-wrapper {
  position: relative;
  z-index: 10;
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  padding: 32px;
  text-align: center;
}

/* Conteneur */
.home-container {
  width: 100%;
  max-width: 800px;
}

/* Carte de bienvenue */
.home-card {
  background-color: var(--panel-grey);
  border-radius: 12px;
  padding: 48px 32px;
  box-shadow: 0 0 40px rgba(0, 194, 194, 0.05);
  box-sizing: border-box;
}

/* Titres */
.welcome-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: var(--primary-accent);
  margin-bottom: 16px;
}

.welcome-subtitle {
  font-size: 1.25rem;
  color: var(--text-secondary);
  margin-bottom: 32px;
}

/* Bouton */
.login-button {
  display: inline-block;
  background-color: var(--primary-accent);
  color: var(--bg-dark);
  text-decoration: none;
  font-weight: 600;
  font-size: 1rem;
  padding: 12px 32px;
  border-radius: 6px;
  transition: background-color 0.2s, color 0.2s;
}

.login-button:hover {
  background-color: var(--primary-hover);
  color: var(--text-primary);
}

/* Responsive */
@media (max-width: 768px) {
  .welcome-title {
    font-size: 2rem;
  }
  
  .welcome-subtitle {
    font-size: 1.1rem;
  }
  
  .home-card {
    padding: 32px 24px;
  }
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\home\HomePage.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\navigation\TopNavigation.vue =====
<template>
  <nav class="navbar">
    <div class="nav-left">
      <router-link to="/" class="brand">NetSecure-IQ</router-link>
      <router-link to="/" class="nav-link" :class="{ active: $route.path === '/' }">Home</router-link>

      <!-- Logged OUT -->
      <template v-if="!isAuthenticated">
        <router-link to="/login" class="nav-link" :class="{ active: $route.path === '/login' }">Login</router-link>
        <router-link to="/register" class="nav-link" :class="{ active: $route.path === '/register' }">Register</router-link>
      </template>

      <!-- Logged IN -->
      <template v-else>
        <router-link to="/dashboard" class="nav-link" :class="{ active: $route.path === '/dashboard' }">Dashboard</router-link>
        <router-link to="/organization" class="nav-link" :class="{ active: $route.path === '/organization' }">Organisation</router-link>
        <router-link to="/routertable" class="nav-link" :class="{ active: $route.path === '/routertable' }">RouterTable</router-link>
        <router-link to="/adduser" class="nav-link" :class="{ active: $route.path === '/adduser' }">Add User</router-link>
        <router-link to="/addoperator" class="nav-link" :class="{ active: $route.path === '/addoperator' }">Add Operator</router-link>
        <router-link to="/agents" class="nav-link" :class="{ active: $route.path === '/agents' }">Agents</router-link>
        <router-link to="/agents/register" class="nav-link" :class="{ active: $route.path === '/agents/register' }">PrÃ©-enregistrement</router-link>

        <!-- The logout button is back -->
        <button @click="onLogout" class="nav-link logout-btn">Logout</button>
      </template>
    </div>

    <div class="nav-right">
      <button class="theme-toggle" @click="toggleTheme" :aria-label="isDark ? 'Switch to light mode' : 'Switch to dark mode'">
        <span v-if="isDark">â˜€ï¸</span>
        <span v-else>ðŸŒ™</span>
      </button>
    </div>
  </nav>
</template>

<script setup>
import { useAuth } from '@/composables/useAuth.js'
import { ref, computed, onMounted, onBeforeUnmount } from 'vue'
import { useRouter } from 'vue-router'

const router = useRouter()
const { isAuthenticated, logout } = useAuth()

// keep navbar reactive to external changes to localStorage (login form / logout)
const tick = ref(0)
const bump = () => { tick.value++ }
onMounted(() => window.addEventListener('auth-updated', bump))
onBeforeUnmount(() => window.removeEventListener('auth-updated', bump))

// Theme
const theme = ref(localStorage.getItem('theme') || 'dark')
const isDark = computed(() => theme.value === 'dark')
function toggleTheme() {
  theme.value = isDark.value ? 'light' : 'dark'
  document.documentElement.setAttribute('data-theme', theme.value)
  localStorage.setItem('theme', theme.value)
}
onMounted(() => {
  document.documentElement.setAttribute('data-theme', theme.value)
})

function onLogout() {
  logout()           // clears storage + sends auth-updated + navigates to /login
  // make sure router is in sync (optional safety)
  if (router.currentRoute.value.path !== '/login') {
    router.push('/login')
  }
}
</script>

<style scoped>
:root {
  --bg-dark: #0e111a;
  --panel-grey: #1a1d26;
  --divider-grey: #2a2d36;
  --text-primary: #f5f7fa;
  --text-secondary: #9ca3af;
  --primary-accent: #00b4aa;
  --primary-hover: #008a8a;
}

.navbar {
  position: fixed; top: 0; left: 0; right: 0;
  z-index: 1000;
  display: flex; align-items: center; justify-content: space-between;
  padding: 0 32px; height: 64px;
  background-color: var(--bg-dark);
  border-bottom: 1px solid var(--divider-grey);
}

.nav-left { display: flex; align-items: center; gap: 24px; }
.brand { font-weight: bold; font-size: 18px; color: var(--primary-accent); text-decoration: none; }
.brand:hover { color: var(--primary-hover); }

.nav-link {
  color: var(--text-secondary); text-decoration: none;
  font-size: 14px; padding: 8px 12px; border-radius: 4px;
  transition: all 0.2s ease;
}
.nav-link:hover, .nav-link.active { color: var(--primary-accent); background: rgba(0,194,194,0.1); }
.logout-btn { background: none; border: none; cursor: pointer; }

.nav-right { margin-left: auto; }
.theme-toggle {
  background: none; border: none; color: var(--text-secondary);
  cursor: pointer; font-size: 1.25rem; padding: 8px; border-radius: 50%;
}
.theme-toggle:hover { background-color: var(--divider-grey); color: var(--text-primary); }
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\navigation\TopNavigation.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\navigation\TopNavigationAdmin.vue =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\navigation\TopNavigationAdmin.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\navigation\TopNavigationLoggedOut.vue =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\navigation\TopNavigationLoggedOut.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\navigation\TopNavigationOperator.vue =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\navigation\TopNavigationOperator.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\navigation\TopNavigationRoleSwitcher.vue =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\navigation\TopNavigationRoleSwitcher.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\navigation\TopNavigationUser.vue =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\navigation\TopNavigationUser.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\organization\OrganizationForm.vue =====
<template>
  <div class="login-page">
    <!-- Canvas animÃ© -->
    <div id="particles-js"></div>

    <!-- Formulaire d'organisation -->
    <div class="login-wrapper">
      <div class="login-container">
        <div class="login-card">
          <h2 class="login-title">NetSecure-IQ</h2>
          <h3 class="login-subtitle">Register Your Organization</h3>

          <form @submit.prevent="submitForm" class="login-form">
            <!-- Organization Info -->
            <div class="form-section">
              <h4><i class="fas fa-building"></i> Organization Information</h4>
              <input v-model="form.name" placeholder="Organization Name" required />
              <input v-model="form.vat_number" placeholder="VAT Number or Fiscal Code" required />
              <input v-model="form.address" placeholder="Address" required />
              <div class="form-row">
                <input v-model="form.city" placeholder="City" required />
                <input v-model="form.state" placeholder="State" required />
                <input v-model="form.zip_code" placeholder="ZIP Code" required />
              </div>
              <input v-model="form.email" type="email" placeholder="Email" required />
              <input v-model="form.phone" type="tel" placeholder="Phone Number" required />
              <input v-model="form.pec_email" type="email" placeholder="PEC Email (Optional)" />
              <input v-model="form.sdi" placeholder="SDI Code (Optional)" />
            </div>

            <!-- Company Manager -->
            <div class="form-section">
              <h4><i class="fas fa-user-tie"></i> Company Manager</h4>
              <input v-model="form.manager_name" placeholder="Name and Surname" required />
              <input v-model="form.manager_email" type="email" placeholder="Email" required />
              <input v-model="form.manager_phone" placeholder="Phone Number" required />
            </div>

            <!-- Technical Manager -->
            <div class="form-section">
              <h4><i class="fas fa-user-cog"></i> Technical Manager</h4>
              <input v-model="form.technical_name" placeholder="Name and Surname" required />
              <input v-model="form.technical_email" type="email" placeholder="Email" required />
              <input v-model="form.technical_phone" placeholder="Phone Number" required />
            </div>

            <!-- Data Controller -->
            <div class="form-section">
              <h4><i class="fas fa-shield-alt"></i> Data Controller</h4>
              <input v-model="form.controller_name" placeholder="Name and Surname" required />
              <input v-model="form.controller_email" type="email" placeholder="Email" required />
              <input v-model="form.controller_phone" placeholder="Phone Number" required />
            </div>

            <!-- Data Processor -->
            <div class="form-section">
              <h4><i class="fas fa-database"></i> Data Processor</h4>
              <input v-model="form.processor_name" placeholder="Name and Surname" required />
              <input v-model="form.processor_email" type="email" placeholder="Email" required />
              <input v-model="form.processor_phone" placeholder="Phone Number" required />
            </div>

            <div class="form-actions">
              <button type="submit" :disabled="loading">
                {{ loading ? 'Submitting...' : 'Submit' }}
              </button>
              <button type="button" class="btn-secondary" @click="goToDashboard">
                Go to Dashboard
              </button>
            </div>

            <p v-if="message" class="login-message" :class="messageType">
              {{ message }}
            </p>
          </form>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted, nextTick } from 'vue'
import { useRouter } from 'vue-router'
import { reactive } from 'vue'

const router = useRouter()
const message = ref('')
const loading = ref(false)
const successMessage = ref(false)

const messageType = computed(() => {
  return successMessage.value ? 'success' : 'error'
})

/**
 * Initialise ou recharge particles.js en fonction du thÃ¨me actuel.
 */
function renderParticles() {
  const dark = document.documentElement.getAttribute('data-theme') === 'dark' || 
              document.documentElement.classList.contains('dark')
  
  // supprime ancien canvas
  const old = document.querySelector('#particles-js > canvas')
  if (old) old.remove()

  // VÃ©rifie si le thÃ¨me est dÃ©fini dans localStorage
  const savedTheme = localStorage.getItem('theme')
  const isDark = savedTheme ? savedTheme === 'dark' : dark

  // (re)lance particlesJS
  window.particlesJS('particles-js', {
    particles: {
      number: { value: 80, density: { enable: true, value_area: 800 } },
      color: { value: isDark ? '#ffffff' : '#555555' },
      shape: { type: 'circle' },
      opacity: { value: isDark ? 0.5 : 0.5 },
      size: { value: 3, random: true },
      line_linked: {
        enable: true,
        distance: 150,
        color: isDark ? '#ffffff' : '#888888',
        opacity: isDark ? 0.4 : 0.4,
        width: 1
      },
      move: { enable: true, speed: 6, direction: 'none', out_mode: 'bounce' }
    },
    interactivity: {
      detect_on: 'canvas',
      events: {
        onhover: { enable: true, mode: 'repulse' },
        onclick: { enable: true, mode: 'push' },
        resize: true
      },
      modes: {
        repulse: { distance: 200 },
        push: { particles_nb: 4 }
      }
    },
    retina_detect: true
  })
}

// Function to ensure particles are loaded after DOM and theme are ready
async function initializeParticles() {
  // Ensure the particles container exists
  if (!document.getElementById('particles-js')) {
    await new Promise(resolve => setTimeout(resolve, 50));
    return initializeParticles();
  }
  
  // Check for saved theme preference
  const savedTheme = localStorage.getItem('theme')
  if (savedTheme) {
    document.documentElement.setAttribute('data-theme', savedTheme)
    if (savedTheme === 'dark') {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }
  }
  
  // Load particles script if not already loaded
  if (!window.particlesJS) {
    await new Promise((resolve) => {
      const script = document.createElement('script');
      script.src = '/particles/particles.min.js';
      script.onload = resolve;
      document.body.appendChild(script);
    });
  }
  
  // Ensure theme is applied
  await nextTick();
  
  renderParticles();
  
  // Set up theme change observer
  const obs = new MutationObserver((mutations) => {
    for (const m of mutations) {
      if (m.attributeName === 'data-theme' || m.attributeName === 'class') {
        // Update localStorage when theme changes
        const theme = document.documentElement.getAttribute('data-theme') || 
                     (document.documentElement.classList.contains('dark') ? 'dark' : 'light')
        localStorage.setItem('theme', theme)
        
        // Re-render particles with new theme
        const old = document.querySelector('#particles-js > canvas')
        if (old) old.remove()
        renderParticles()
      }
    }
  });

  // Observe theme changes on document.documentElement
  obs.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['data-theme', 'class']
  });
  
  // Initial render with current theme
  renderParticles()
}

// Initialize particles when component is mounted
onMounted(() => {
  // Set initial theme from localStorage if available
  const savedTheme = localStorage.getItem('theme')
  if (savedTheme) {
    document.documentElement.setAttribute('data-theme', savedTheme)
    if (savedTheme === 'dark') {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }
  }
  
  initializeParticles()
})

const form = reactive({
  name: '', vat_number: '', address: '', state: '', city: '', zip_code: '',
  email: '', pec_email: '', sdi: '', phone: '',
  manager_name: '', manager_email: '', manager_phone: '',
  technical_name: '', technical_email: '', technical_phone: '',
  controller_name: '', controller_email: '', controller_phone: '',
  processor_name: '', processor_email: '', processor_phone: ''
})

const goToDashboard = () => {
  router.push('/dashboard')
}

const submitForm = async () => {
  console.log("ðŸ“¤ submitForm() triggered")

  const personnelInfo = `
Company Manager:
  Name: ${form.manager_name}
  Email: ${form.manager_email}
  Phone: ${form.manager_phone}

Technical Manager:
  Name: ${form.technical_name}
  Email: ${form.technical_email}
  Phone: ${form.technical_phone}

Data Controller:
  Name: ${form.controller_name}
  Email: ${form.controller_email}
  Phone: ${form.controller_phone}

Data Processor:
  Name: ${form.processor_name}
  Email: ${form.processor_email}
  Phone: ${form.processor_phone}
`.trim()

  const payload = {
    name: form.name,
    vat_number: form.vat_number,
    address: form.address,
    state: form.state,
    city: form.city,
    zip_code: form.zip_code,
    contact_email: form.email,
    pec_email: form.pec_email,
    sdi_code: form.sdi,
    contact_phone: form.phone,
    personnel_info: personnelInfo,
    user_id: localStorage.getItem("user_id"),
  }

  console.log("ðŸ“¤ Sending payload:", JSON.stringify(payload, null, 2))

  try {
    const response = await fetch(`${process.env.VUE_APP_BACKEND_URL}/api/complete-organization`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    })

    const text = await response.text()
    let data
    try {
      data = JSON.parse(text)
    } catch {
      throw new Error(text)
    }

    if (!response.ok) throw new Error(data.error || data.message)

    message.value = "Organization info submitted! Redirecting..."
    setTimeout(() => router.push('/dashboard'), 1000)

  } catch (err) {
    message.value = "Submission failed: " + err.message
  }
}
</script>

<style scoped>
@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css');

:root {
  --bg-dark: #0e111a;
  --panel-grey: #1a1d26;
  --divider-grey: #2a2d36;
  --text-primary: #f5f7fa;
  --text-secondary: #9ca3af;
  --primary-accent: #00c2c2;
  --primary-hover: #00a7a7;
  --danger: #ef4444;
  --success: #22c55e;
  --border-radius: 12px;
  --transition: all 0.2s ease;
}

/* Page entiÃ¨re */
.login-page {
  position: relative;
  min-height: 100vh;
  overflow: hidden;
  background-color: var(--bg-dark);
}

/* ===== Particles ===== */
#particles-js {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: 0;
  background-color: var(--bg-dark);
  transition: background-color 0.3s ease;
  pointer-events: none;
}

[data-theme='light'] #particles-js {
  background-color: #E0E0E0;
}

/* ===== Login Wrapper ===== */
.login-wrapper {
  position: relative;
  z-index: 10;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 32px;
  min-height: 100vh;
}

/* ===== Container ===== */
.login-container {
  width: 100%;
  max-width: 800px;
}

/* ===== Login Card ===== */
.login-card {
  background-color: var(--panel-grey);
  border-radius: 16px;
  padding: 32px;
  box-shadow: 0 0 40px rgba(0, 194, 194, 0.05);
  box-sizing: border-box;
  border: 1px solid rgba(255, 255, 255, 0.05);
}

/* ===== Headers ===== */
.login-title {
  text-align: center;
  font-size: 24px;
  font-weight: 600;
  color: var(--primary-accent);
  margin-bottom: 8px;
}

.login-subtitle {
  text-align: center;
  font-size: 18px;
  color: var(--text-primary);
  margin-bottom: 32px;
  font-weight: 500;
}

/* ===== Form ===== */
.login-form {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

/* ===== Form Sections ===== */
.form-section {
  background-color: rgba(31, 41, 55, 0.3);
  border-radius: 8px;
  padding: 16px;
  margin-bottom: 16px;
  transition: background-color 0.3s ease;
}

:root:not([data-theme='dark']) .form-section {
  background-color: rgba(243, 244, 246, 0.5);
  border: 1px solid rgba(209, 213, 219, 0.5);
}

.form-section h4 {
  color: var(--primary-accent);
  margin: 0 0 16px;
  font-size: 16px;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 8px;
}

.form-section h4 i {
  font-size: 14px;
}

/* ===== Form Inputs ===== */
.login-form input {
  width: 100%;
  background-color: var(--panel-grey);
  border: 1px solid var(--divider-grey);
  border-radius: 6px;
  padding: 12px 14px;
  font-size: 14px;
  color: var(--text-primary);
  transition: var(--transition);
  margin-bottom: 8px;
}

.login-form input:focus {
  outline: none;
  border-color: var(--primary-accent);
  box-shadow: 0 0 0 2px rgba(0, 194, 194, 0.2);
}

.login-form input::placeholder {
  color: var(--text-secondary);
  opacity: 0.7;
}

/* ===== Form Rows ===== */
.form-row {
  display: flex;
  gap: 16px;
  margin-bottom: 8px;
}

.form-row input {
  margin-bottom: 0;
}

/* ===== Form Actions ===== */
.form-actions {
  display: flex;
  justify-content: space-between;
  margin-top: 24px;
  gap: 16px;
}

/* ===== Buttons ===== */
button {
  flex: 1;
  padding: 12px 20px;
  border: none;
  border-radius: 6px;
  font-weight: 600;
  font-size: 14px;
  cursor: pointer;
  transition: var(--transition);
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
}

button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

button:not(:disabled):hover {
  transform: translateY(-1px);
}

/* Primary Button */
button[type='submit'] {
  background-color: var(--primary-accent);
  color: #0e111a;
}

button[type='submit']:not(:disabled):hover {
  background-color: var(--primary-hover);
}

/* Secondary Button */
.btn-secondary {
  background-color: transparent;
  color: var(--primary-accent);
  border: 1px solid var(--primary-accent) !important;
}

.btn-secondary:not(:disabled):hover {
  background-color: rgba(0, 194, 194, 0.1);
}

/* ===== Messages ===== */
.login-message {
  margin-top: 16px;
  padding: 12px 16px;
  border-radius: 6px;
  font-size: 14px;
  text-align: center;
  transition: var(--transition);
}

.login-message.success {
  background-color: rgba(34, 197, 94, 0.1);
  color: var(--success);
  border: 1px solid rgba(34, 197, 94, 0.2);
}

.login-message.error {
  background-color: rgba(239, 68, 68, 0.1);
  color: var(--danger);
  border: 1px solid rgba(239, 68, 68, 0.2);
}

/* ===== Responsive Design ===== */
@media (max-width: 768px) {
  .login-wrapper {
    padding: 16px;
  }
  
  .login-card {
    padding: 24px;
  }
  
  .form-row {
    flex-direction: column;
    gap: 8px;
  }
  
  .form-actions {
    flex-direction: column;
  }
  
  button {
    width: 100%;
  }
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\organization\OrganizationForm.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\organization\OrganizationProfile.vue =====
<template>
  <div class="login-page">
    <!-- Indicateur de chargement -->
    <div v-if="isLoading" class="loading-overlay">
      <div class="loading-spinner"></div>
    </div>
    
    <!-- animated particles background -->
    <div id="particles-js"></div>
    
    <!-- Messages d'erreur et de succÃ¨s -->
    <div v-if="showError" class="notification error">
      {{ errorMessage }}
      <button @click="showError = false" class="close-btn">&times;</button>
    </div>
    
    <div v-if="showSuccess" class="notification success">
      DonnÃ©es chargÃ©es avec succÃ¨s !
      <button @click="showSuccess = false" class="close-btn">&times;</button>
    </div>

    <div class="login-wrapper">
      <div class="login-container">
        <div class="login-card">
          <!-- Page header -->
          <h2 class="login-title">Organization Profile</h2>
          <h3 class="login-subtitle">View and manage your organization's information</h3>

          <!-- Profile content -->
          <div class="login-form">
            <!-- Organization Info -->
            <div class="form-section">
              <h4><i class="fas fa-building"></i> Organization Information</h4>
              <input readonly :value="org.name" />
              <input readonly :value="org.vatNumber" />
              <input readonly :value="org.address" />
              <div class="form-row">
                <input readonly :value="org.city" />
                <input readonly :value="org.state" />
                <input readonly :value="org.zipCode" />
              </div>
              <input readonly :value="org.email" />
              <input readonly :value="org.phone" />
              <input readonly :value="org.pecEmail || 'â€”'" />
              <input readonly :value="org.sdiCode || 'â€”'" />
            </div>

            <!-- Company Manager -->
            <div class="form-section">
              <h4><i class="fas fa-user-tie"></i> Company Manager</h4>
              <input readonly :value="org.manager.name" />
              <input readonly :value="org.manager.email" />
              <input readonly :value="org.manager.phone" />
            </div>

            <!-- Data Controller -->
            <div class="form-section">
              <h4><i class="fas fa-shield-alt"></i> Data Controller</h4>
              <input readonly :value="org.controller.name" />
              <input readonly :value="org.controller.email" />
              <input readonly :value="org.controller.phone" />
            </div>

            <!-- Data Processor -->
            <div class="form-section">
              <h4><i class="fas fa-database"></i> Data Processor</h4>
              <input readonly :value="org.processor.name" />
              <input readonly :value="org.processor.email" />
              <input readonly :value="org.processor.phone" />
            </div>

            <!-- Edit button -->
            <div class="form-actions">
              <router-link to="/organization/edit" class="btn btn-primary">
                <i class="fas fa-edit"></i> Edit Profile
              </router-link>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, nextTick } from 'vue';
import { useRouter } from 'vue-router';

const router = useRouter();
const isLoading = ref(true);
const error = ref(null);
const showSuccess = ref(false);
const showError = ref(false);
const errorMessage = ref('');

// DonnÃ©es de l'organisation
const org = ref({
  name: '',
  vatNumber: '',
  address: '',
  city: '',
  zipCode: '',
  state: '',
  email: '',
  phone: '',
  sdiCode: '',
  pecEmail: '',
  personnelInfo: '',
  manager: {
    name: '',
    email: '',
    phone: ''
  },
  controller: {
    name: '',
    email: '',
    phone: ''
  },
  processor: {
    name: '',
    email: '',
    phone: ''
  }
});

// RÃ©cupÃ©rer les donnÃ©es de l'organisation depuis l'API
const fetchOrganization = async () => {
  try {
    isLoading.value = true;
    error.value = null;
    
    const token = localStorage.getItem('token');
    if (!token) {
      throw new Error('No authentication token found');
    }

    const response = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:8080'}/api/complete-organization`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || 'Failed to fetch organization data');
    }

    const data = await response.json();
    
    // Mettre Ã  jour les donnÃ©es de l'organisation
    org.value = {
      name: data.name || '',
      vatNumber: data.vat_number || '',
      address: data.address || '',
      city: data.city || '',
      zipCode: data.zip_code || '',
      state: data.state || '',
      email: data.contact_email || '',
      phone: data.contact_phone || '',
      sdiCode: data.sdi_code || '',
      pecEmail: data.pec_email || '',
      personnelInfo: data.personnel_info || '',
      manager: {
        name: data.manager?.name || 'N/A',
        email: data.manager?.email || 'N/A',
        phone: data.manager?.phone || 'N/A',
      },
      controller: {
        name: data.controller?.name || 'N/A',
        email: data.controller?.email || 'N/A',
        phone: data.controller?.phone || 'N/A',
      },
      processor: {
        name: data.processor?.name || 'N/A',
        email: data.processor?.email || 'N/A',
        phone: data.processor?.phone || 'N/A',
      },
    };
    
  } catch (err) {
    console.error('Error fetching organization:', err);
    const message = err.message || 'An error occurred while loading organization data';
    error.value = message;
    errorMessage.value = message;
    showError.value = true;
    
    // Rediriger vers la page de connexion si non authentifiÃ©
    if (err.message.includes('token') || err.message.includes('authenticate')) {
      router.push('/login');
    }
  } finally {
    isLoading.value = false;
  }
};

// Fonction pour gÃ©rer les particules d'arriÃ¨re-plan
const renderParticles = () => {
  const theme = document.documentElement.getAttribute('data-theme');
  const isDark = theme === 'dark';

  const oldCanvas = document.querySelector('#particles-js > canvas');
  if (oldCanvas) oldCanvas.remove();

  window.particlesJS('particles-js', {
    particles: {
      number: { value: 80, density: { enable: true, value_area: 800 } },
      color: { value: isDark ? '#ffffff' : '#555555' },
      shape: { type: 'circle' },
      opacity: { value: isDark ? 0.5 : 0.5 },
      size: { value: 3, random: true },
      line_linked: {
        enable: true,
        distance: 150,
        color: isDark ? '#ffffff' : '#888888',
        opacity: isDark ? 0.4 : 0.4,
        width: 1
      },
      move: { enable: true, speed: 6, direction: 'none', out_mode: 'bounce' }
    },
    interactivity: {
      detect_on: 'canvas',
      events: {
        onhover: { enable: true, mode: 'repulse' },
        onclick: { enable: true, mode: 'push' },
        resize: true
      },
      modes: {
        repulse: { distance: 200 },
        push: { particles_nb: 4 }
      }
    },
    retina_detect: true
  })
}

async function initializeParticles() {
  // 1) wait DOM
  await nextTick()

  // 2) load script if needed
  if (!window.particlesJS) {
    await new Promise(resolve => {
      const s = document.createElement('script')
      s.src = '/particles/particles.min.js'
      s.onload = resolve
      document.body.appendChild(s)
    })
  }

  // 3) initial render
  renderParticles()

  // 4) observe theme changes
  new MutationObserver(muts => {
    muts.forEach(m => {
      if (m.attributeName === 'data-theme' || m.attributeName === 'class') {
        renderParticles()
      }
    })
  }).observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['data-theme', 'class']
  })
}

// --- mount ---
onMounted(async () => {
  document.title = 'NetSecure-IQ - Organization Profile';
  await nextTick();
  await initializeParticles();
  await fetchOrganization();
  showSuccess.value = true;
  setTimeout(() => showSuccess.value = false, 3000);
})
</script>

<style scoped>
@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css');

/* Notifications */
.notification {
  position: fixed;
  top: 20px;
  right: 20px;
  padding: 15px 20px;
  border-radius: 8px;
  color: white;
  display: flex;
  align-items: center;
  justify-content: space-between;
  max-width: 400px;
  z-index: 1000;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  animation: slideIn 0.3s ease-out;
}

.notification.error {
  background-color: #ff4d4f;
}

.notification.success {
  background-color: #52c41a;
}

.notification .close-btn {
  background: none;
  border: none;
  color: white;
  font-size: 20px;
  cursor: pointer;
  margin-left: 15px;
  padding: 0 5px;
  line-height: 1;
}

@keyframes slideIn {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

/* Loading indicator */
.loading-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(255, 255, 255, 0.8);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.loading-spinner {
  border: 4px solid #f3f3f3;
  border-top: 4px solid #3498db;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

:root {
  --bg-dark: #0e111a;
  --panel-grey: #1a1d26;
  --divider-grey: #2a2d36;
  --text-primary: #f5f7fa;
  --text-secondary: #9ca3af;
  --primary-accent: #00c2c2;
  --primary-hover: #00a7a7;
  --border-radius: 12px;
  --transition: all 0.2s ease;
}
/* hide any themeâ€toggle you might have globally */
.theme-switcher { display: none!important; }

.login-page {
  position: relative;
  min-height: 100vh;
  background-color: var(--bg-dark);
  overflow: hidden;
}

#particles-js {
  position: fixed;
  top: 0; left: 0;
  width: 100vw; height: 100vh;
  z-index: 0;
  background-color: var(--bg-dark);
  transition: background-color 0.3s ease;
  pointer-events: none;
}
[data-theme='light'] #particles-js {
  background-color: #E0E0E0;
}

.login-wrapper {
  position: relative; z-index: 10;
  display: flex; align-items: center; justify-content: center;
  padding: 32px; min-height: 100vh;
}

.login-container {
  width: 100%; max-width: 800px;
}

.login-card {
  background-color: var(--panel-grey);
  border-radius: 16px;
  padding: 32px;
  border: 1px solid rgba(255,255,255,0.05);
  box-shadow: 0 0 40px rgba(0,194,194,0.05);
  box-sizing: border-box;
}

.login-title {
  text-align: center;
  font-size: 24px;
  font-weight: 600;
  color: var(--primary-accent);
  margin-bottom: 8px;
}
.login-subtitle {
  text-align: center;
  font-size: 18px;
  color: var(--text-primary);
  margin-bottom: 32px;
  font-weight: 500;
}

.login-form {
  display: flex; flex-direction: column; gap: 16px;
}

.form-section {
  background-color: rgba(31,41,55,0.3);
  border-radius: 8px;
  padding: 16px;
  transition: background-color 0.3s ease;
}
:root:not([data-theme='dark']) .form-section {
  background-color: rgba(243,244,246,0.5);
  border: 1px solid rgba(209,213,219,0.5);
}
.form-section h4 {
  color: var(--primary-accent);
  margin: 0 0 16px;
  font-size: 16px; font-weight: 500;
  display: flex; align-items: center; gap: 8px;
}

.login-form input {
  width: 100%;
  background-color: var(--panel-grey);
  border: 1px solid var(--divider-grey);
  border-radius: 6px;
  padding: 12px 14px;
  font-size: 14px;
  color: var(--text-primary);
  transition: var(--transition);
  margin-bottom: 8px;
}

.form-row {
  display: flex; gap: 16px; margin-bottom: 8px;
}
.form-row input { margin-bottom: 0; }

.form-actions {
  display: flex; justify-content: center; margin-top: 24px; gap: 16px;
}

.btn {
  padding: 12px 20px;
  border: none;
  border-radius: 6px;
  font-weight: 600;
  font-size: 14px;
  cursor: pointer;
  transition: var(--transition);
  display: inline-flex; align-items: center; gap: 8px;
}

.btn-primary {
  background-color: var(--primary-accent);
  color: #0e111a;
}
.btn-primary:hover {
  background-color: var(--primary-hover);
}

@media (max-width: 768px) {
  .login-wrapper { padding: 16px; }
  .login-card   { padding: 24px; }
  .form-row     { flex-direction: column; gap: 8px; }
  .form-actions { flex-direction: column; }
  .btn          { width: 100%; }
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\organization\OrganizationProfile.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\organization\RouterTable.vue =====
<template>
  <div class="router-table-page">
    <BackgroundParticles />
    <h2 style="margin-bottom: 1rem;">Router Status Table</h2>
    <table class="router-table" v-if="Array.isArray(routers) && routers.length">
      <thead>
        <tr>
          <th>#</th>
          <th>MAC Address</th>
          <th>Status</th>
          <th>Timestamp</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="(router, index) in routers" :key="router.mac">
          <td>{{ index + 1 }}</td>
          <td>{{ router.mac }}</td>
          <td :class="router.status === 'online' ? 'online' : 'offline'">{{ router.status }}</td>
          <td>{{ formatDate(router.time) }}</td>
        </tr>
      </tbody>
    </table>
    <p v-else>No routers found.</p>
  </div>
</template>

<script setup>
import BackgroundParticles from '../common/BackgroundParticles.vue';
import { ref, onMounted } from 'vue'

const routers = ref([])

function formatDate(isoString) {
  const date = new Date(isoString)
  return date.toLocaleString()
}

onMounted(async () => {
  const token = localStorage.getItem("token")

  if (!token) {
    console.error("âŒ No JWT token found in localStorage")
    return
  }

  try {
    const response = await fetch(`${process.env.VUE_APP_BACKEND_URL}/api/data/routers`, {
      method: "GET",
      headers: {
        "Authorization": `Bearer ${token}`,
        "Content-Type": "application/json"
      }
    })

    const text = await response.text()
    if (!response.ok) {
      console.error("âŒ Error response:", text)
      throw new Error(text)
    }

    const data = JSON.parse(text)

    if (!Array.isArray(data)) {
      console.warn("âš ï¸ Invalid router data:", data)
      routers.value = []
      return
    }

    routers.value = data.map(entry => ({
      mac: entry.mac,
      status: entry.value,
      time: entry.time
    }))
  } catch (err) {
    console.error("âŒ Error loading router status:", err.message)
    routers.value = []
  }
})
</script>

<style scoped>
.router-table {
  width: 100%;
  border-collapse: collapse;
  font-family: Arial, sans-serif;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.router-table th,
.router-table td {
  padding: 12px 16px;
  border: 1px solid #ccc;
  text-align: left;
}

.router-table th {
  background-color: #f4f4f4;
}

.router-table tr:hover {
  background-color: #f9f9f9;
}

.online {
  color: green;
  font-weight: bold;
}

.offline {
  color: red;
  font-weight: bold;
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\components\organization\RouterTable.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\composables\useApi.js =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\composables\useApi.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\composables\useAuth.js =====
import { ref } from 'vue';

const isAuthenticated = ref(false);

function login() {
  isAuthenticated.value = true;
}

function logout() {
  isAuthenticated.value = false;
  window.location.reload();
}

export function useAuth() {
  return {
    isAuthenticated,
    login,
    logout,
  };
}

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\composables\useAuth.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\composables\useAuth.ts =====
import { ref, computed } from 'vue';

const user = ref<{ email: string } | null>(null);

export function useAuth() {
  function login(email: string) {
    user.value = { email };
  }
  function logout() {
    user.value = null;
  }
  const isAuthenticated = computed(() => !!user.value);
  return { user, isAuthenticated, login, logout };
}

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\composables\useAuth.ts =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\composables\useTheme.js =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\composables\useTheme.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\main.js =====
import { createApp } from 'vue'
import App from './App.vue'
import router from './router'

createApp(App).use(router).mount('#app')

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\main.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\router\guards\authGuard.js =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\router\guards\authGuard.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\router\guards\onboardingGuard.js =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\router\guards\onboardingGuard.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\router\guards\roleGuard.js =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\router\guards\roleGuard.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\router\index.js =====
import { createRouter, createWebHashHistory } from 'vue-router'

// Components/views (chemins corrigÃ©s)
import HomePage from '@/components/home/HomePage.vue'
import LoginForm from '@/views/auth/LoginForm.vue'
import RegisterForm from '@/views/auth/RegisterForm.vue'
import DashboardPage from '@/views/dashboard/DashboardPage.vue'
import OrganizationForm from '@/components/organization/OrganizationForm.vue'
import OrganizationProfile from '@/components/organization/OrganizationProfile.vue'
import RouterTable from '@/components/organization/RouterTable.vue'
import AddOperatorForm from '@/components/forms/AddOperatorForm.vue'
import AddUserForm from '@/components/forms/AddUserForm.vue'
// Lazy views
const AgentDashboard = () => import('@/views/agents/AgentDashboard.vue');
const RegisterAgent = () => import('@/views/agents/RegisterAgent.vue');

const routes = [
  { path: '/', component: HomePage },
  { path: '/login', component: LoginForm },
  { path: '/register', component: RegisterForm },

  // Commun Ã  tous les utilisateurs authentifiÃ©s
  { path: '/dashboard', component: DashboardPage, meta: { requiresAuth: true } },
  { path: '/routertable', component: RouterTable, meta: { requiresAuth: true } },

  // RÃ´les : admin + operator
  { path: '/organization', component: OrganizationProfile, meta: { requiresAuth: true, roles: ['administrator', 'operator'] } },
  { path: '/organization/edit', component: OrganizationForm, meta: { requiresAuth: true, roles: ['administrator', 'operator'] } },

  // Add User : admin OU operator (operator doit avoir une org)
  { path: '/adduser', component: AddUserForm, meta: { requiresAuth: true, roles: ['administrator', 'operator'], requireOrgForOperator: true } },

  // Add Operator : admin uniquement
  { path: '/addoperator', component: AddOperatorForm, meta: { requiresAuth: true, roles: ['administrator'] } },

  // Agents : admin OU operator (operator doit avoir une org)
  { path: '/agents', component: AgentDashboard, meta: { requiresAuth: true, roles: ['administrator', 'operator'], requireOrgForOperator: true } },
  { path: '/agents/register', component: RegisterAgent, meta: { requiresAuth: true, roles: ['administrator', 'operator'], requireOrgForOperator: true } },

  // Legacy alias conservÃ© si besoin
  { path: '/organizationForm', component: OrganizationForm, meta: { requiresAuth: true, roles: ['administrator', 'operator'] } },
];

const router = createRouter({
  history: createWebHashHistory(),
  routes
})

// Guard d'auth + rÃ´les ultra-simple basÃ© sur localStorage


router.beforeEach((to, from, next) => {
  const raw = localStorage.getItem('token')
  const isAuthed = !!(raw && raw !== 'undefined' && raw !== 'null')

  const rawRole = (localStorage.getItem('role') || '').toLowerCase()
  const role = rawRole === 'admin' ? 'administrator' : rawRole
  const orgId = localStorage.getItem('organization_id') || ''
  // ... rest unchanged


  // Bloque les pages protÃ©gÃ©es
  if (to.meta.requiresAuth && !isAuthed) {
    return next('/login')
  }

  // Ã‰vite d'aller sur login/register quand dÃ©jÃ  connectÃ©
  if (isAuthed && (to.path === '/login' || to.path === '/register')) {
    return next('/dashboard')
  }

  // ContrÃ´le de rÃ´le si prÃ©cisÃ©
  const allowedRoles = to.meta.roles
  if (Array.isArray(allowedRoles) && allowedRoles.length > 0) {
    if (!allowedRoles.includes(role)) {
      // rÃ´le non autorisÃ© -> on renvoie sur dashboard (UX soft)
      return next('/dashboard')
    }
  }

  // Pour operator, certaines routes exigent d'avoir une organisation
  if (to.meta.requireOrgForOperator && role === 'operator' && !orgId) {
    return next('/organization/edit')
  }

  return next()
})

export default router

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\router\index.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\stores\authStore.js =====
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'

export const useAuthStore = defineStore('auth', () => {
  const token = ref(localStorage.getItem('token') || '')
  const user = ref(JSON.parse(localStorage.getItem('user') || 'null'))

  const isAuthenticated = computed(() => !!token.value)
  const role = computed(() => user.value?.role || null)

  function setAuth(newToken, newUser) {
    token.value = newToken
    user.value = newUser
    localStorage.setItem('token', newToken)
    localStorage.setItem('user', JSON.stringify(newUser))
  }

  function logout() {
    token.value = ''
    user.value = null
    localStorage.removeItem('token')
    localStorage.removeItem('user')
  }

  return { token, user, isAuthenticated, role, setAuth, logout }
})

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\stores\authStore.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\stores\authStore.ts =====
import { defineStore } from 'pinia'
import { ref, computed } from 'vue'

export const useAuthStore = defineStore('auth', {
  state: () => ({
  isAuthenticated: false,
  user: null, // { email, role_id, organization_id }
  token: ''
    isAuthenticated: false,
    user: null, // { email, role_id, organization_id }
    token: ''
  }),
  getters: {
  isAdmin: (state) => state.user?.role_id === 1,
  isOperator: (state) => state.user?.role_id === 2,
  isUser: (state) => state.user?.role_id === 3,
    isAdmin: (state) => state.user?.role_id === 1,
    isOperator: (state) => state.user?.role_id === 2,
    isUser: (state) => state.user?.role_id === 3,
  },
  actions: {
  logout() {
    this.isAuthenticated = false
    this.user = null
    this.token = ''
    localStorage.removeItem('token')
    localStorage.removeItem('user')
  },
    logout() {
      this.isAuthenticated = false
      this.user = null
      this.token = ''
      localStorage.removeItem('token')
      // Optionally: use router.push('/login') if router is available here
    }
  }
})

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\stores\authStore.ts =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\stores\siteStore.js =====
import { defineStore } from 'pinia'
import { useAuthStore } from './authStore'

export const useSiteStore = defineStore('site', {
  state: () => ({
    sites: [],
  }),
  actions: {
    async fetchSites() {
      const auth = useAuthStore()
      let url = '/api/sites'
      // Optionally add org/user filter params based on role
      this.sites = await fetch(url, {
        headers: { Authorization: `Bearer ${auth.token}` }
      }).then(r => r.json())
    }
  },
  getters: {
    filteredSites(state) {
      const auth = useAuthStore()
      if (auth.role === 'Administrator') return state.sites
      if (auth.role === 'Operator') return state.sites.filter(s => s.organization_id === auth.user.organization_id)
      if (auth.role === 'User') return state.sites.filter(s => auth.user.site_ids?.includes(s.id))
      return []
    }
  }
})

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\stores\siteStore.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\utils\api.js =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\utils\api.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\utils\formatters.js =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\utils\formatters.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\utils\role.js =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\utils\role.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\utils\validations\email.js =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\utils\validations\email.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\utils\validations\mac.js =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\utils\validations\mac.js =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\agents\AgentDashboard.vue =====
<template>
  <div class="agent-dashboard">
    <h1>Gestion des agents MikroTik</h1>
    <div class="actions">
      <button :disabled="!selectedAgent" @click="onAssociate">Associer</button>
      <button :disabled="!selectedAgent" @click="onDeactivate">DÃ©sactiver</button>
      <button :disabled="!selectedAgent" @click="onDelete">Supprimer</button>
      <router-link to="/agents/register"><button>PrÃ©-enregistrer un agent</button></router-link>
    </div>
    <table class="agent-table">
      <thead>
        <tr>
          <th>SÃ©lection</th>
          <th>MAC Adresse</th>
          <th>Statut</th>
          <th>Organisation</th>
          <th>Site</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="agent in agents" :key="agent.mac" :class="[statusClass(agent.status), {selected: agent === selectedAgent}]" @click="selectAgent(agent)">
          <td><input type="radio" :checked="agent === selectedAgent" /></td>
          <td>{{ agent.mac }}</td>
          <td><span :class="statusBadgeClass(agent.status)">{{ agent.statusLabel }}</span></td>
          <td>{{ agent.organization || '-' }}</td>
          <td>{{ agent.site || '-' }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</template>

<script setup>
import { ref } from 'vue';

const agents = ref([
  { mac: 'AA:BB:CC:DD:EE:01', status: 'associated', organization: 'Org1', site: 'SiteA' },
  { mac: 'AA:BB:CC:DD:EE:02', status: 'unassociated' },
  { mac: 'AA:BB:CC:DD:EE:03', status: 'deactivated', organization: 'Org2' },
]);
const selectedAgent = ref(null);

function selectAgent(agent) {
  selectedAgent.value = agent;
}
function statusClass(status) {
  return {
    'row-associated': status === 'associated',
    'row-unassociated': status === 'unassociated',
    'row-deactivated': status === 'deactivated',
  };
}
function statusBadgeClass(status) {
  return {
    badge: true,
    'badge-green': status === 'associated',
    'badge-orange': status === 'unassociated',
    'badge-red': status === 'deactivated',
  };
}
function onAssociate() {
  // TODO: implÃ©menter
}
function onDeactivate() {
  // TODO: implÃ©menter
}
function onDelete() {
  // TODO: implÃ©menter
}
</script>

<style scoped>
.agent-dashboard { padding: 2rem; }
.actions { margin-bottom: 1rem; display: flex; gap: 1rem; }
.agent-table { width: 100%; border-collapse: collapse; }
.agent-table th, .agent-table td { padding: 0.5rem 1rem; border-bottom: 1px solid #222; }
.row-associated { background: #e8fbe8; }
.row-unassociated { background: #fff8e1; }
.row-deactivated { background: #fdeaea; }
.selected { outline: 2px solid #1976d2; }
.badge { padding: 0.2em 0.7em; border-radius: 1em; font-weight: bold; }
.badge-green { background: #4caf50; color: #fff; }
.badge-orange { background: #ff9800; color: #fff; }
.badge-red { background: #f44336; color: #fff; }
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\agents\AgentDashboard.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\agents\index.ts =====
export { default as AgentDashboard } from './AgentDashboard.vue';
export { default as RegisterAgent } from './RegisterAgent.vue';

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\agents\index.ts =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\agents\RegisterAgent.vue =====
<template>
  <div class="register-agent-page">
    <BackgroundParticles />
    <div class="register-agent">
      <h1>PrÃ©-enregistrement dâ€™un agent MikroTik</h1>
      <form @submit.prevent="onSubmit">
        <label for="mac">Adresse MAC principale (ether1):</label>
        <input id="mac" v-model="mac" required placeholder="AA:BB:CC:DD:EE:FF" />
        <button type="submit" :disabled="loading">GÃ©nÃ©rer le script</button>
      </form>
      <div v-if="loading" class="loading">GÃ©nÃ©ration du script...</div>
      <div v-if="script">
        <label>Script gÃ©nÃ©rÃ© :</label>
        <textarea readonly rows="8" :value="script"></textarea>
        <div class="actions">
          <button @click="copyScript">Copier</button>
          <button @click="downloadScript">TÃ©lÃ©charger</button>
          <button @click="testAgent" :disabled="testing">Test</button>
          <button @click="cancelRegistration" :disabled="testing">Annuler lâ€™inscription</button>
        </div>
        <div v-if="testing" class="loading">Test de connexion...</div>
        <div v-if="testResult === true" class="success">Agent en ligne, peer dÃ©sactivÃ© et retour Ã  la liste.</div>
        <div v-if="testResult === false" class="error">Ã‰chec du test, vÃ©rifiez la connexion de lâ€™agent.</div>
      </div>
    </div>
  </div>
</template>

<script setup>
import BackgroundParticles from '@/components/common/BackgroundParticles.vue';
import { ref } from 'vue';
import { useRouter } from 'vue-router';

const mac = ref('');
const script = ref('');
const loading = ref(false);
const testing = ref(false);
const testResult = ref(null);
const router = useRouter();

function onSubmit() {
  loading.value = true;
  setTimeout(() => {
    // Simuler la gÃ©nÃ©ration de script
    script.value = `/interface/wireguard/add listen-port=13231 private-key=...\n/interface/wireguard/peers/add public-key=... allowed-address=...`; 
    loading.value = false;
  }, 1500);
}
function copyScript() {
  navigator.clipboard.writeText(script.value);
}
function downloadScript() {
  const blob = new Blob([script.value], { type: 'text/plain' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = `mikrotik-script-${mac.value}.rsc`;
  link.click();
}
function testAgent() {
  testing.value = true;
  testResult.value = null;
  setTimeout(() => {
    // Simuler le test (ping)
    const success = Math.random() > 0.5;
    testResult.value = success;
    testing.value = false;
    if (success) {
      // Simuler dÃ©sactivation peer cÃ´tÃ© backend et retour Ã  la liste
      setTimeout(() => router.push('/agents'), 1000);
    }
  }, 1500);
}
function cancelRegistration() {
  script.value = '';
  mac.value = '';
  testResult.value = null;
}
</script>

<style scoped>
.register-agent { padding: 2rem; max-width: 600px; margin: auto; }
form { margin-bottom: 1rem; }
input { margin-right: 1rem; }
textarea { width: 100%; margin-bottom: 1rem; }
.actions { display: flex; gap: 1rem; }
.loading { color: #1976d2; font-weight: bold; }
.success { color: #4caf50; font-weight: bold; }
.error { color: #f44336; font-weight: bold; }
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\agents\RegisterAgent.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\auth\LoginForm.vue =====
<template>
  <div class="login-page">
    <!-- Canvas animÃ© -->
    <div id="particles-js"></div>

    <!-- Formulaire de login -->
    <div class="login-wrapper">
      <div class="login-container">
        <div class="login-card">
          <h2 class="login-title">NetSecure-IQ</h2>
          <h3 class="login-subtitle">Login to your account</h3>

          <form @submit.prevent="login" class="login-form">
            <input v-model="email" type="email" placeholder="Email address" required />
            <input v-model="password" type="password" placeholder="Password" required />
            <button :disabled="loading" type="submit">
              {{ loading ? 'Loading...' : 'Login' }}
            </button>
          </form>

          <p class="login-footer">
            Don't have an account?
            <router-link to="/register">Register</router-link>
          </p>

          <p v-if="message" :class="['login-message', successMessage ? 'success' : 'error']">
            {{ message }}
          </p>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, nextTick } from 'vue'
import { useRouter } from 'vue-router'
import { useAuth } from '@/composables/useAuth.js'

const email = ref('')
const password = ref('')
const message = ref('')
const successMessage = ref(false)
const loading = ref(false)
const router = useRouter()
const { login: setAuthLogin } = useAuth()

// Particles
function renderParticles() {
  const dark = document.documentElement.getAttribute('data-theme') === 'dark'
  const old = document.querySelector('#particles-js > canvas')
  if (old) old.remove()

  window.particlesJS('particles-js', {
    particles: {
      number: { value: 80, density: { enable: true, value_area: 800 } },
      color: { value: dark ? '#ffffff' : '#555555' },
      shape: { type: 'circle' },
      opacity: { value: dark ? 0.5 : 0.5 },
      size: { value: 3, random: true },
      line_linked: {
        enable: true,
        distance: 150,
        color: dark ? '#ffffff' : '#888888',
        opacity: dark ? 0.4 : 0.4,
        width: 1
      },
      move: { enable: true, speed: 6, direction: 'none', out_mode: 'bounce' }
    },
    interactivity: {
      detect_on: 'canvas',
      events: {
        onhover: { enable: true, mode: 'repulse' },
        onclick: { enable: true, mode: 'push' },
        resize: true
      },
      modes: {
        repulse: { distance: 200 },
        push: { particles_nb: 4 }
      }
    },
    retina_detect: true
  })
}

async function initializeParticles() {
  if (!document.getElementById('particles-js')) {
    await new Promise(resolve => setTimeout(resolve, 50))
    return initializeParticles()
  }

  if (!window.particlesJS) {
    await new Promise((resolve) => {
      const script = document.createElement('script')
      script.src = '/particles/particles.min.js'
      script.onload = resolve
      document.body.appendChild(script)
    })
  }

  await nextTick()
  renderParticles()

  const obs = new MutationObserver((mutations) => {
    for (const m of mutations) {
      if (m.attributeName === 'data-theme') {
        renderParticles()
      }
    }
  })
  obs.observe(document.documentElement, { attributes: true, attributeFilter: ['data-theme'] })
}

onMounted(() => {
  initializeParticles()
})

const login = async () => {
  loading.value = true
  try {
    const res = await fetch(`${process.env.VUE_APP_BACKEND_URL}/api/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: email.value, password: password.value })
    })

    const data = await res.json().catch(() => ({}))
    if (!res.ok) throw new Error(data.error || data.message || 'Login failed')

    message.value = 'Login successful! Redirecting...'
    successMessage.value = true

    // Stockage token & infos
    localStorage.setItem('token', data.token)
    localStorage.setItem('user_id', data.user_id)
    localStorage.setItem('role', (data.role || '').toLowerCase())
    localStorage.setItem('organization_id', data.organization_id || '')

    // informer le reste de l'app (Dashboard) que l'auth vient d'Ãªtre mise Ã  jour
    window.dispatchEvent(new Event('auth-updated'))

    // MAJ de l'Ã©tat du composable
    setAuthLogin()

    // Redirection
    let redirectTo = '/dashboard'
    const role = (data.role || '').toLowerCase()
    if (role === 'user') redirectTo = '/routertable'
    else if (role === 'operator' && !data.organization_id) redirectTo = '/organization/edit'

    // si on est dÃ©jÃ  sur la mÃªme route, force un refresh logique
    if (router.currentRoute.value.path === redirectTo) {
      router.replace({ path: redirectTo, query: { t: Date.now().toString() } })
    } else {
      router.push(redirectTo)
    }
  } catch (err) {
    message.value = 'Error: ' + err.message
    successMessage.value = false
  } finally {
    loading.value = false
  }
}
</script>

<style scoped>
:root {
  --bg-dark: #0e111a;
  --panel-grey: #1a1d26;
  --divider-grey: #2a2d36;
  --text-primary: #f5f7fa;
  --text-secondary: #9ca3af;
  --primary-accent: #00c2c2;
  --primary-hover: #00a7a7;
  --danger: #ef4444;
  --success: #22c55e;
}

/* Page entiÃ¨re */
.login-page {
  position: relative;
  min-height: 100vh;
  overflow: hidden;
}

/* Canvas particles */
#particles-js {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: 0;
  background-color: var(--bg-dark);
  transition: background-color 0.3s ease;
}

/* override light mode */
[data-theme='light'] #particles-js {
  background-color: #E0E0E0;
}

/* Wrapper du formulaire */
.login-wrapper {
  position: relative;
  z-index: 10;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 32px;
  min-height: 100vh;
}

/* Conteneur */
.login-container {
  width: 100%;
  max-width: 420px;
}

/* Carte de login */
.login-card {
  background-color: var(--panel-grey);
  border-radius: 12px;
  padding: 32px;
  box-shadow: 0 0 40px rgba(0, 194, 194, 0.05);
  box-sizing: border-box;
}

/* Titres */
.login-title {
  text-align: center;
  font-size: 20px;
  font-weight: 600;
  color: var(--primary-accent);
  margin-bottom: 8px;
}
.login-subtitle {
  text-align: center;
  font-size: 16px;
  margin-bottom: 24px;
}

/* Form */
.login-form {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

/* Inputs & bouton full-width */
.login-form input,
.login-form button {
  width: 100%;
  box-sizing: border-box;
}

/* Input style */
.login-form input {
  background-color: var(--panel-grey);
  border: 1px solid var(--divider-grey);
  border-radius: 6px;
  padding: 12px 14px;
  font-size: 14px;
  color: var(--text-primary);
  transition: border-color 0.2s;
}
.login-form input::placeholder {
  color: var(--text-secondary);
}
.login-form input:focus {
  outline: none;
  border-color: var(--primary-accent);
  background-color: var(--bg-dark);
}

/* Bouton */
.login-form button {
  background-color: var(--primary-accent);
  color: var(--bg-dark);
  border: none;
  border-radius: 6px;
  font-weight: 600;
  font-size: 14px;
  padding: 12px 20px;
  cursor: pointer;
  transition: background-color 0.2s;
}
.login-form button:hover {
  background-color: var(--primary-hover);
  color: var(--text-primary);
}
.login-form button:disabled {
  background-color: #2f333d;
  color: #666;
  cursor: not-allowed;
}

/* Footer */
.login-footer {
  text-align: center;
  font-size: 13px;
  margin-top: 16px;
  color: var(--text-secondary);
}
.login-footer a {
  color: var(--primary-accent);
  margin-left: 4px;
  text-decoration: none;
}
.login-footer a:hover {
  color: var(--primary-hover);
}

/* Messages */
.login-message {
  margin-top: 16px;
  font-size: 14px;
  padding: 10px 12px;
  border-radius: 6px;
  text-align: center;
}
.login-message.success {
  background-color: rgba(34, 197, 94, 0.1);
  color: var(--success);
}
.login-message.error {
  background-color: rgba(239, 68, 68, 0.1);
  color: var(--danger);
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\auth\LoginForm.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\auth\RegisterForm.vue =====
<template>
  <div>
    <!-- Fond animÃ© derriÃ¨re tout -->
    <div id="particles-js"></div>

    <!-- Contenu du register -->
    <div class="register-wrapper">
      <div class="register-container">
        <div class="register-card">
          <h2 class="register-title">NetSecure-IQ</h2>
          <h3 class="register-subtitle">Create your account</h3>

          <form @submit.prevent="register" class="register-form">
            <input
              v-model="email"
              type="email"
              placeholder="Email address"
              required
            />
            <button type="submit" :disabled="loading">
              {{ loading ? "Registering..." : "Register" }}
            </button>
          </form>

          <p v-if="message" class="register-message success">{{ message }}</p>
          <p v-if="error" class="register-message error">{{ error }}</p>

          <p class="register-footer">
            Already have an account?
            <router-link to="/login">Login</router-link>
          </p>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, nextTick } from 'vue'
import { useRouter } from 'vue-router'

const email = ref('')
const message = ref('')
const error = ref('')
const loading = ref(false)
const router = useRouter()

/**
 * Initialise ou recharge particles.js en fonction du thÃ¨me actuel.
 */
function renderParticles() {
  const dark = document.documentElement.getAttribute('data-theme') === 'dark'
  // supprime ancien canvas
  const old = document.querySelector('#particles-js > canvas')
  if (old) old.remove()

  // (re)lance particlesJS
  window.particlesJS('particles-js', {
    particles: {
      number: { value: 80, density: { enable: true, value_area: 800 } },
      color: { value: dark ? '#ffffff' : '#555555' },
      shape: { type: 'circle' },
      opacity: { value: dark ? 0.5 : 0.5 },
      size: { value: 3, random: true },
      line_linked: {
        enable: true,
        distance: 150,
        color: dark ? '#ffffff' : '#888888',
        opacity: dark ? 0.4 : 0.4,
        width: 1
      },
      move: { enable: true, speed: 6, direction: 'none', out_mode: 'bounce' }
    },
    interactivity: {
      detect_on: 'canvas',
      events: {
        onhover: { enable: true, mode: 'repulse' },
        onclick: { enable: true, mode: 'push' },
        resize: true
      },
      modes: {
        repulse: { distance: 200 },
        push: { particles_nb: 4 }
      }
    },
    retina_detect: true
  })
}

// Function to ensure particles are loaded after DOM and theme are ready
async function initializeParticles() {
  // Ensure the particles container exists
  if (!document.getElementById('particles-js')) {
    await new Promise(resolve => setTimeout(resolve, 50));
    return initializeParticles();
  }
  
  // Load particles script if not already loaded
  if (!window.particlesJS) {
    await new Promise((resolve) => {
      const script = document.createElement('script');
      script.src = '/particles/particles.min.js';
      script.onload = resolve;
      document.body.appendChild(script);
    });
  }
  
  // Ensure theme is applied
  await nextTick();
  
  // Initial render
  renderParticles();
  
  // Set up theme change observer
  const obs = new MutationObserver((mutations) => {
    for (const m of mutations) {
      if (m.attributeName === 'data-theme') {
        renderParticles();
      }
    }
  });

  // Observe theme changes on document.documentElement
  obs.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['data-theme']
  });
}

onMounted(() => {
  initializeParticles();
})

const register = async () => {
  message.value = ''
  error.value = ''
  loading.value = true

  try {
    const res = await fetch(`${process.env.VUE_APP_BACKEND_URL}/api/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: email.value })
    })

    const data = await res.json()
    if (!res.ok) throw new Error(data.error || data.message || 'Registration failed')

    message.value = data.message || 'Registration successful. Check your email.'
    email.value = ''

    setTimeout(() => router.push('/login'), 3000)
  } catch (err) {
    error.value = err.message
  } finally {
    loading.value = false
  }
}
</script>

<style scoped>
:root {
  --bg-dark: #0e111a;
  --panel-grey: #1a1d26;
  --divider-grey: #2a2d36;
  --text-primary: #f5f7fa;
  --text-secondary: #9ca3af;
  --primary-accent: #00c2c2;
  --primary-hover: #00a7a7;
  --danger: #ef4444;
  --success: #22c55e;
}

/* Fond animÃ© */
#particles-js {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: 0;
  background-color: var(--bg-dark);
  transition: background-color 0.3s ease;
  pointer-events: none;
}

/* override light mode */
[data-theme='light'] #particles-js {
  background-color: #E0E0E0;
}

/* Wrapper du formulaire */
.register-wrapper {
  position: relative;
  z-index: 10;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 32px;
  min-height: 100vh;
}

.register-wrapper,
.register-wrapper * {
  color: var(--text-primary);
  font-family: 'Inter', sans-serif;
}

.register-container {
  width: 100%;
  max-width: 420px;
}

.register-card {
  background-color: var(--panel-grey);
  border-radius: 12px;
  padding: 32px;
  box-shadow: 0 0 40px rgba(0, 194, 194, 0.05);
  box-sizing: border-box;
  width: 100%;
}

.register-title {
  text-align: center;
  font-size: 20px;
  font-weight: 600;
  color: var(--primary-accent);
  margin-bottom: 8px;
}

.register-subtitle {
  text-align: center;
  font-size: 16px;
  margin-bottom: 24px;
}

.register-form {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.register-form input,
.register-form button {
  width: 100%;
  box-sizing: border-box;
}

input {
  background-color: var(--panel-grey);
  border: 1px solid var(--divider-grey);
  border-radius: 6px;
  padding: 12px 14px;
  font-size: 14px;
  color: var(--text-primary);
  transition: border-color 0.2s ease;
}

input::placeholder {
  color: var(--text-secondary);
}

input:focus {
  outline: none;
  border-color: var(--primary-accent);
  background-color: var(--bg-dark);
}

button {
  background-color: var(--primary-accent);
  color: var(--bg-dark);
  border: none;
  border-radius: 6px;
  font-weight: 600;
  font-size: 14px;
  padding: 12px 20px;
  cursor: pointer;
  transition: all 0.2s ease;
}

button:hover {
  background-color: var(--primary-hover);
  color: var(--text-primary);
}

button:disabled {
  background-color: #2f333d;
  color: #666;
  cursor: not-allowed;
}

.register-message {
  margin-top: 16px;
  font-size: 14px;
  padding: 10px 12px;
  border-radius: 6px;
  text-align: center;
}

.register-message.success {
  background-color: rgba(34, 197, 94, 0.1);
  color: var(--success);
}

.register-message.error {
  background-color: rgba(239, 68, 68, 0.1);
  color: var(--danger);
}

.register-footer {
  text-align: center;
  font-size: 13px;
  margin-top: 16px;
  color: var(--text-secondary);
}

.register-footer a {
  color: var(--primary-accent);
  text-decoration: none;
  margin-left: 4px;
}

.register-footer a:hover {
  color: var(--primary-hover);
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\auth\RegisterForm.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\dashboard\DashboardAdmin.vue =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\dashboard\DashboardAdmin.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\dashboard\DashboardOperator.vue =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\dashboard\DashboardOperator.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\dashboard\DashboardPage.vue =====
<template>
  <div class="dashboard-page">
    <!-- Particles Background -->
    <div id="particles-js"></div>

    <!-- Main Content -->
    <div class="dashboard-wrapper">
      <div class="dashboard-container">
        <div class="dashboard-card">
          <h1 class="dashboard-title">Dashboard</h1>
          
          <div v-if="isAdminOrOperator" class="dashboard-actions">
            <button class="dashboard-button" @click="goToRouterInfo">
              <i class="fas fa-network-wired"></i> Router Info
            </button>
            <button v-if="!needsOrganization" class="dashboard-button" @click="addUser">
              <i class="fas fa-user-plus"></i> Add User
            </button>
            <button v-if="needsOrganization" class="dashboard-button" @click="goToOrganizationInfo">
              <i class="fas fa-building"></i> Organization Info
            </button>
            <button v-if="canAddOperator" class="dashboard-button" @click="addOperator">
              <i class="fas fa-user-shield"></i> Add Operator
            </button>
          </div>

          <div v-else class="welcome-message">
            <p>Welcome to your dashboard. Select an option to get started.</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { computed, onMounted, nextTick } from 'vue'
import { useRouter } from 'vue-router'

const router = useRouter()

// Computed properties (alignÃ©es avec le localStorage)
const role = computed(() => (localStorage.getItem("role") || '').toLowerCase())
const isAdmin = computed(() => role.value === "administrator")
const isOperator = computed(() => role.value === "operator")
const hasOrganization = computed(() => !!localStorage.getItem("organization_id"))
const isAdminOrOperator = computed(() => isAdmin.value || isOperator.value)
const needsOrganization = computed(() => isOperator.value && !hasOrganization.value)
const canAddOperator = computed(() => isAdmin.value || (isOperator.value && hasOrganization.value))

// Navigation methods (alignÃ©es avec tes routes)
const goToRouterInfo = () => {
  router.push('/routertable')
}
const addUser = () => {
  router.push('/adduser')
}
const goToOrganizationInfo = () => {
  router.push('/organization/edit')
}
const addOperator = () => {
  router.push('/addoperator')
}

// Particles initialization
const renderParticles = () => {
  const dark = document.documentElement.getAttribute('data-theme') === 'dark' || 
              document.documentElement.classList.contains('dark')
  
  const old = document.querySelector('#particles-js > canvas')
  if (old) old.remove()

  const savedTheme = localStorage.getItem('theme')
  const isDark = savedTheme ? savedTheme === 'dark' : dark

  if (window.particlesJS) {
    window.particlesJS('particles-js', {
      particles: {
        number: { value: 80, density: { enable: true, value_area: 800 } },
        color: { value: isDark ? '#ffffff' : '#555555' },
        shape: { type: 'circle' },
        opacity: { value: isDark ? 0.5 : 0.5 },
        size: { value: 3, random: true },
        line_linked: {
          enable: true,
          distance: 150,
          color: isDark ? '#ffffff' : '#888888',
          opacity: isDark ? 0.4 : 0.4,
          width: 1
        },
        move: { enable: true, speed: 6, direction: 'none', out_mode: 'bounce' }
      },
      interactivity: {
        detect_on: 'canvas',
        events: {
          onhover: { enable: true, mode: 'repulse' },
          onclick: { enable: true, mode: 'push' },
          resize: true
        },
        modes: {
          repulse: { distance: 200 },
          push: { particles_nb: 4 }
        }
      },
      retina_detect: true
    })
  }
}

const initializeParticles = async () => {
  if (!document.getElementById('particles-js')) {
    await new Promise(resolve => setTimeout(resolve, 50));
    return initializeParticles();
  }
  
  const savedTheme = localStorage.getItem('theme')
  if (savedTheme) {
    document.documentElement.setAttribute('data-theme', savedTheme)
    if (savedTheme === 'dark') {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }
  }
  
  if (!window.particlesJS) {
    await new Promise((resolve) => {
      const script = document.createElement('script');
      script.src = '/particles/particles.min.js';
      script.onload = resolve;
      document.body.appendChild(script);
    });
  }
  
  await nextTick();
  renderParticles();
  
  const obs = new MutationObserver((mutations) => {
    for (const m of mutations) {
      if (m.attributeName === 'data-theme' || m.attributeName === 'class') {
        const theme = document.documentElement.getAttribute('data-theme') || 
                     (document.documentElement.classList.contains('dark') ? 'dark' : 'light')
        localStorage.setItem('theme', theme)
        
        const old = document.querySelector('#particles-js > canvas')
        if (old) old.remove()
        renderParticles()
      }
    }
  });

  obs.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['data-theme', 'class']
  });
}

// Lifecycle hooks
onMounted(() => {
  document.title = 'NetSecure-IQ - Dashboard'
  initializeParticles()
})
</script>

<style scoped>
.dashboard-page {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  background-color: var(--background-color, #f5f7fa);
  color: var(--text-color, #2c3e50);
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

#particles-js {
  position: fixed;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  z-index: 0;
}

.dashboard-wrapper {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  position: relative;
  z-index: 1;
}

.dashboard-container {
  width: 100%;
  max-width: 1000px;
  margin: 0 auto;
}

.dashboard-card {
  background-color: var(--panel-grey);
  border-radius: 16px;
  padding: 2.5rem;
  box-shadow: 0 0 40px rgba(0, 194, 194, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.dashboard-title {
  text-align: center;
  color: var(--text-color, #2c3e50);
  margin-bottom: 2rem;
  font-size: 2rem;
  font-weight: 600;
}

.dashboard-actions {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1.5rem;
  margin-top: 1.5rem;
}

.dashboard-button {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 1.5rem 1rem;
  background-color: var(--button-bg, #f0f4f8);
  color: var(--button-text, #2c3e50);
  border: 1px solid var(--border-color, #e0e6ed);
  border-radius: 12px;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  min-height: 100px;
}

.dashboard-button i {
  font-size: 1.75rem;
  margin-bottom: 0.75rem;
  color: var(--primary-color, #3b82f6);
}

.dashboard-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  background-color: var(--button-hover-bg, #e6edf5);
}

.welcome-message {
  text-align: center;
  padding: 2rem 0;
  color: var(--text-secondary, #64748b);
}

/* Dark mode styles */
:global(.dark) .dashboard-card {
  background-color: rgba(30, 41, 59, 0.7);
  border-color: rgba(255, 255, 255, 0.1);
}

:global(.dark) .dashboard-button {
  background-color: rgba(30, 41, 59, 0.7);
  border-color: rgba(255, 255, 255, 0.1);
  color: #e2e8f0;
}

:global(.dark) .dashboard-button:hover {
  background-color: rgba(41, 55, 78, 0.7);
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .dashboard-actions {
    grid-template-columns: 1fr;
  }
  
  .dashboard-card {
    padding: 1.5rem;
  }
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\dashboard\DashboardPage.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\dashboard\DashboardUser.vue =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\dashboard\DashboardUser.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\Login.vue =====
<template>
  <div class="login-container">
    <h1>Connexion</h1>
    <form @submit.prevent="onLogin">
      <div class="form-group">
        <label for="email">Email</label>
        <input id="email" v-model="email" type="email" required />
      </div>
      <div class="form-group">
        <label for="password">Mot de passe</label>
        <input id="password" v-model="password" type="password" required />
      </div>
      <button type="submit" :disabled="loading">Se connecter</button>
      <div v-if="error" class="error">{{ error }}</div>
    </form>
  </div>
</template>

<script setup>
defineOptions({ name: 'LoginPage' })
import { ref } from 'vue'
import { useRouter } from 'vue-router'
import { useAuthStore } from '@/stores/authStore'

const email = ref('')
const password = ref('')
const loading = ref(false)
const error = ref('')
const router = useRouter()
const auth = useAuthStore()

async function onLogin() {
  loading.value = true
  error.value = ''
  try {
    // Remplacer par un vrai appel API plus tard
    if (email.value === 'admin@example.com' && password.value === 'admin') {
      auth.isAuthenticated = true
      auth.user = { email: email.value, role_id: 1 } // Admin
      auth.token = 'fake-token'
      router.push('/')
    } else if (email.value === 'operator@example.com' && password.value === 'operator') {
      auth.isAuthenticated = true
      auth.user = { email: email.value, role_id: 2 } // Operator
      auth.token = 'fake-token'
      router.push('/')
    } else if (email.value === 'user@example.com' && password.value === 'user') {
      auth.isAuthenticated = true
      auth.user = { email: email.value, role_id: 3 } // User
      auth.token = 'fake-token'
      router.push('/')
    } else {
      throw new Error('Identifiants invalides')
    }
  } catch (e) {
    error.value = e.message || 'Erreur de connexion'
  } finally {
    loading.value = false
  }
}
</script>

<style scoped>
.login-container {
  max-width: 350px;
  margin: 4rem auto;
  background: #181b23;
  border-radius: 8px;
  padding: 2rem;
  box-shadow: 0 4px 16px rgba(0,0,0,0.25);
  color: #f5f7fa;
}
h1 {
  margin-bottom: 1.5rem;
  font-size: 1.6rem;
  text-align: center;
}
.form-group {
  margin-bottom: 1rem;
}
label {
  display: block;
  margin-bottom: 0.3rem;
}
input {
  width: 100%;
  padding: 0.6rem;
  border-radius: 4px;
  border: 1px solid #2a2d36;
  background: #232635;
  color: #f5f7fa;
}
button {
  width: 100%;
  padding: 0.7rem;
  background: #00b4aa;
  color: #fff;
  border: none;
  border-radius: 4px;
  font-weight: bold;
  cursor: pointer;
  margin-top: 1rem;
  transition: background 0.2s;
}
button:disabled {
  background: #555a;
  cursor: not-allowed;
}
.error {
  color: #f44336;
  font-weight: bold;
  margin-top: 1rem;
  text-align: center;
}
</style>

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\Login.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\onboarding\JoinOrganization.vue =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\onboarding\JoinOrganization.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\onboarding\OnboardingOperator.vue =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\onboarding\OnboardingOperator.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\system\NotAuthorized.vue =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\system\NotAuthorized.vue =====

===== BEGIN: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\system\NotFound.vue =====

===== END: C:\Users\matis\VSCodeProject\NetSecure-IQ\src\frontend\src\views\system\NotFound.vue =====

